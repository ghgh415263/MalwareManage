package com.malclean.admin.application.assignment.assignment;

import com.malclean.admin.application.assignment.assignment.requestdto.AssignmentSaveReq;
import com.malclean.admin.application.common.exception.NotExistEntityException;
import com.malclean.admin.domain.assignment.assignment.MalwareAssignmentRepository;
import com.malclean.admin.domain.assignment.assignmentattachment.AssignmentAttachment;
import com.malclean.admin.domain.assignment.assignment.MalwareAssignment;
import com.malclean.admin.domain.assignment.assignmentattachment.AssignmentAttachmentRepository;
import com.malclean.admin.domain.assignment.assignmentattachment.AssignmentAttachmentStore;
import com.malclean.admin.domain.malware.malware.repository.MalwareRepository;
import com.malclean.admin.domain.malware.malware.Malware;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@RequiredArgsConstructor
@Slf4j
@Service
public class AssignmentSaveService {

    private final MalwareRepository malwareRepository;

    private final MalwareAssignmentRepository malwareAssignmentRepository;

    private final AssignmentAttachmentRepository assignmentAttachmentRepository;

    private final AssignmentAttachmentStore assignmentAttachmentStore;

    @Transactional
    public Long saveMalwareAssignment(Long malwareId, AssignmentSaveReq assignmentSaveReq, Long loginMemberId){

        Malware Malware = malwareRepository.findById(malwareId)
                .orElseThrow(NotExistEntityException::new);

        MalwareAssignment malwareAssignment = MalwareAssignment.builder()
                .assignerId(loginMemberId)
                .assigneeId(assignmentSaveReq.getAssigneeId())
                .malware(Malware)
                .title(assignmentSaveReq.getTitle())
                .content(assignmentSaveReq.getContent())
                .assignmentStatus(assignmentSaveReq.getAssignmentStatusType())
                .estimatedTime(assignmentSaveReq.getEstimatedTime())
                .build();

        MalwareAssignment savedMalwareAssignment = malwareAssignmentRepository.save(malwareAssignment);

        saveMultipartFileList(assignmentSaveReq.getMultipartFileList(), malwareAssignment);

        return savedMalwareAssignment.getId();
    }

    private void saveMultipartFileList(List<MultipartFile> multipartFileList, MalwareAssignment malwareAssignment) {
        multipartFileList.stream()
                .forEach(multipartFile -> {
                    String storeFilename = assignmentAttachmentStore.save(multipartFile);
                    AssignmentAttachment assignmentAttachment = AssignmentAttachment.builder()
                            .malwareAssignment(malwareAssignment)
                            .filename(multipartFile.getOriginalFilename())
                            .storeFilename(storeFilename)
                            .build();
                    assignmentAttachmentRepository.save(assignmentAttachment);
                });
    }
}
