package com.malclean.admin.application.assignment.assignmentcomment;

import com.malclean.admin.application.assignment.CommentNotExistException;
import com.malclean.admin.application.assignment.IsNotMyCommentException;
import com.malclean.admin.domain.assignment.assignmentcomment.AssignmentComment;
import com.malclean.admin.domain.assignment.assignmentcomment.AssignmentCommentRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@RequiredArgsConstructor
@Slf4j
@Service
public class AssginmentCommentEditService {

    private final AssignmentCommentRepository assignmentCommentRepository;

    @Transactional
    public AssignmentComment getDetail(Long commentId, Long loginMemberId){

        AssignmentComment assignmentComment = assignmentCommentRepository.findById(commentId)
                .orElseThrow(() -> {
                    log.warn("memberId={}이 commentId={}을 수정하기 위해서 상세 정보를 요청하였으나 존재하지 않는 댓글이였으므로 요청이 거부됨", loginMemberId, commentId);
                    return new CommentNotExistException();
                });

        if(assignmentComment.isNotMine(loginMemberId)) {
            log.warn("memberId={}이 commentId={}을 수정하기 위해서 상세 정보를 요청하였으나 작성자가 아니므로 요청이 거부됨", loginMemberId, commentId);
            throw new IsNotMyCommentException();
        }

        return assignmentComment;
    }

    @Transactional
    public void edit(Long commentId, String newContent, Long loginMemberId) {

        AssignmentComment assignmentComment = assignmentCommentRepository.findById(commentId)
                .orElseThrow(CommentNotExistException::new);

        if(assignmentComment.isNotMine(loginMemberId))
            throw new IsNotMyCommentException();

        assignmentComment.editContent(newContent);
    }

}
