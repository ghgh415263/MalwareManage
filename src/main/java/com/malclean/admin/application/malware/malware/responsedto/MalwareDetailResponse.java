package com.malclean.admin.application.malware.malware.responsedto;

import com.malclean.admin.domain.malware.MalwareMalwareFileMap;
import com.malclean.admin.domain.malware.malware.enums.BehaviorType;
import com.malclean.admin.domain.malware.malware.enums.PurposeType;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import com.malclean.admin.domain.malware.malware.Malware;
import lombok.Getter;
import org.springframework.format.annotation.DateTimeFormat;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Getter
public class MalwareDetailResponse {

    Long id;

    String nickname;

    String title;

    String content;

    RisknessType riskness;

    @DateTimeFormat(pattern="yyyy-MM-dd'T'HH:mm")
    LocalDateTime resolvedTime;

    @DateTimeFormat(pattern="yyyy-MM-dd'T'HH:mm")
    LocalDateTime detectedTime;

    List<PurposeType> purposeList;

    List<BehaviorType> behaviorList;


    Long posterId;
    String posterUsername;


    List<MalwareFileInPage> malwareFileInPageList;

    public MalwareDetailResponse(Malware malware, List<MalwareMalwareFileMap> malwareMalwareFileMapList) {
        id = malware.getId();
        nickname = malware.getNickname();
        title = malware.getTitle();
        riskness = malware.getRiskness();
        content = malware.getContent();
        resolvedTime = malware.getResolvedTime();
        detectedTime = malware.getDetectedTime();
        posterId = malware.getPoster().getId();
        posterUsername = malware.getPoster().getUsername();

        purposeList = malware.getMalwarePurposeList().stream()
                .map(purpose -> purpose.getPurpose())
                .collect(Collectors.toList());

        behaviorList = malware.getMalwareBehaviorList().stream()
                .map(behavior -> behavior.getBehavior())
                .collect(Collectors.toList());

        malwareFileInPageList = malwareMalwareFileMapList.stream()
                .map(malwareMalwareFileMap -> {
                    return new MalwareFileInPage(malwareMalwareFileMap);
                })
                .collect(Collectors.toList());
    }

    @Getter
    static class MalwareFileInPage {

        private Long id;

        private String filename;

        private String signature;

        public MalwareFileInPage(MalwareMalwareFileMap malwareMalwareFileMap) {
            id = malwareMalwareFileMap.getMalwareFile().getId();
            filename = malwareMalwareFileMap.getFilename();
            signature = malwareMalwareFileMap.getMalwareFile().getSignature();
        }
    }
}
