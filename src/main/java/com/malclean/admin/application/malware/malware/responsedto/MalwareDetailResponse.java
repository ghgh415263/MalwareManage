package com.malclean.admin.application.malware.malware.responsedto;

import com.malclean.admin.domain.assignment.assignment.MalwareAssignment;
import com.malclean.admin.domain.malware.malwaremalwarefilemap.MalwareMalwareFileMap;
import com.malclean.admin.domain.malware.malware.Malware;
import lombok.Getter;
import org.springframework.format.annotation.DateTimeFormat;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Getter
public class MalwareDetailResponse {

    private Long id;

    private String nickname;

    private String title;

    private String content;

    private String riskness;

    @DateTimeFormat(pattern="yyyy-MM-dd'T'HH:mm")
    private LocalDateTime resolvedTime;

    @DateTimeFormat(pattern="yyyy-MM-dd'T'HH:mm")
    private LocalDateTime detectedTime;

    private List<String> purposeList;

    private List<String> behaviorList;


    private Long posterId;
    private String posterUsername;


    private List<MalwareFileInMalware> malwareFileInPageList;

    private List<AssignmentInMalware> assignmentList;

    public MalwareDetailResponse(Malware malware, List<MalwareMalwareFileMap> malwareMalwareFileMapList, List<MalwareAssignment> malwareAssignmentList, String username, Long memberId) {
        id = malware.getId();
        nickname = malware.getNickname();
        title = malware.getTitle();
        riskness = malware.getRiskness().getValue();
        content = malware.getContent();
        resolvedTime = malware.getResolvedTime();
        detectedTime = malware.getDetectedTime();
        posterId = malware.getCreatedBy();
        posterUsername = username;

        purposeList = malware.getMalwarePurposeList().stream()
                .map(purpose -> purpose.getPurpose().getKey())
                .collect(Collectors.toList());

        behaviorList = malware.getMalwareBehaviorList().stream()
                .map(behavior -> behavior.getBehavior().getKey())
                .collect(Collectors.toList());

        malwareFileInPageList = malwareMalwareFileMapList.stream()
                .map(malwareMalwareFileMap -> {
                    return new MalwareFileInMalware(malwareMalwareFileMap);
                })
                .collect(Collectors.toList());

        assignmentList = malwareAssignmentList.stream().map((assignment) -> new AssignmentInMalware(assignment))
                .collect(Collectors.toList());
    }

    @Getter
    static class MalwareFileInMalware {

        private Long id;

        private String filename;

        private String signature;

        public MalwareFileInMalware(MalwareMalwareFileMap malwareMalwareFileMap) {
            id = malwareMalwareFileMap.getMalwareFile().getId();
            filename = malwareMalwareFileMap.getFilename();
            signature = malwareMalwareFileMap.getMalwareFile().getSignature();
        }
    }

    @Getter
    static class AssignmentInMalware {

        private Long id;

        private String title;

        private String assignmentStatus;

        private LocalDateTime estimatedTime;

        public AssignmentInMalware(MalwareAssignment assignment) {
            this.id = assignment.getId();
            this.title = assignment.getTitle();
            this.assignmentStatus = assignment.getAssignmentStatus().getValue();
            this.estimatedTime = assignment.getEstimatedTime();
        }
    }

}
