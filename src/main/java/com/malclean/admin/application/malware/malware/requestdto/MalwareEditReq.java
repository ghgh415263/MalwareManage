package com.malclean.admin.application.malware.malware.requestdto;

import lombok.Getter;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Getter
public class MalwareEditReq {

    @NotBlank
    private String title;

    @NotBlank
    private String content;

    @NotBlank
    private String nickname;

    @NotNull
    private String riskness;

    private List<MultipartFile> multipartFileList = new ArrayList<>();
    private List<String> purposeList;
    private List<String> behaviorList;
    private List<Long> deletedFileIdList = new ArrayList<>();

    @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm")
    private LocalDateTime detectedTime;

    @DateTimeFormat(pattern = "yyyy-MM-dd'T'HH:mm")
    private LocalDateTime resolvedTime;

    public MalwareEditReq(String title, String content, String nickname, String riskness,
                          List<MultipartFile> multipartFileList, List<String> purposeList, List<String> behaviorList, List<Long> deletedFileIdList,
                          LocalDateTime detectedTime, LocalDateTime resolvedTime) {

        this.title = title;
        this.content = content;
        this.nickname = nickname;
        this.riskness = riskness;

        setMultipartFileList(multipartFileList);

        this.purposeList = purposeList;
        this.behaviorList = behaviorList;

        setDeletedFileIdList(deletedFileIdList);

        this.detectedTime = detectedTime;
        this.resolvedTime = resolvedTime;
    }

    private void setDeletedFileIdList(List<Long> deletedFileIdList){
        if (deletedFileIdList != null)
            this.deletedFileIdList = deletedFileIdList;
    }

    private void setMultipartFileList(List<MultipartFile> multipartFileList){
        if (multipartFileList != null)
            this.multipartFileList = multipartFileList;

        this.multipartFileList = this.multipartFileList.stream()
                .filter(multipartFile -> !multipartFile.isEmpty())
                .collect(Collectors.toList());
    }

}
