package com.malclean.admin.application.malware.malwarefile;

import com.malclean.admin.domain.malware.MalwareFile;
import com.malclean.admin.domain.malware.MalwareMalwareFileMap;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.malware.malwaremalwarefilemap.MalwareMalwareFileMapRepository;
import com.malclean.admin.domain.malware.malwarefile.MalwareFileRepository;
import com.malclean.admin.infrastructure.malware.malwarefile.SignatureUtils;
import com.malclean.admin.infrastructure.malware.malwarefile.store.LocalStoreManager;
import com.malclean.admin.infrastructure.malware.malwarefile.store.LocalStorePath;
import com.malclean.admin.infrastructure.malware.malwarefile.store.StoreManager;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareFileSaveService {

    private final MalwareFileRepository malwareFileRepository;

    private final MalwareMalwareFileMapRepository malwareMalwareFileMapRepository;

    private final StoreManager localStoreManager = new LocalStoreManager(LocalStorePath.malwarefileDir);

    @Transactional
    public void saveMalwareFileList(Malware malware, Member sessionMember, List<MultipartFile> fileList) {
        for(MultipartFile file : fileList) {

            Long savedMalwareFileId = saveMalwareFile(sessionMember , file);
            MalwareFile findedMalwareFile = malwareFileRepository.findById(savedMalwareFileId)
                    .orElseThrow();

            MalwareMalwareFileMap map = MalwareMalwareFileMap.builder()
                    .malware(malware)
                    .malwareFile(findedMalwareFile)
                    .filename(file.getOriginalFilename())
                    .build();
            malwareMalwareFileMapRepository.save(map);
        }
    }

    @Transactional
    public Long saveMalwareFile(Member sessionMember , MultipartFile file) {
        String fileSignature = new SignatureUtils().createSignature(file); //싱글턴으로 사용시 Not Thread Safe

        MalwareFile findedMalwareFile = malwareFileRepository.findBySignature(fileSignature)
                .orElseGet(() -> {  //null일 때만 불린다.
                            String storeFilename = localStoreManager.save(file);
                            MalwareFile malwareFile = MalwareFile.builder()
                                    .uploader(sessionMember)
                                    .signature(fileSignature)
                                    .storeFilename(storeFilename)
                                    .build();
                            malwareFileRepository.save(malwareFile);
                            return malwareFile;
                        }
                );
        return findedMalwareFile.getId();
    }
}
