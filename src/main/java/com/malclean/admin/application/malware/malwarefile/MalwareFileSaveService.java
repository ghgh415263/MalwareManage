package com.malclean.admin.application.malware.malwarefile;

import com.malclean.admin.domain.malware.malwarefile.*;
import com.malclean.admin.domain.malware.malwarefile.service.StoreManager;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareFileSaveService {

    private final DslMalwareFileRepository dslMalwareFileRepository;

    private final StoreManager localStoreManager;

    private final MalwareFileBulkRepository malwareFileBulkRepository;

    @Transactional
    public List<Malwarefile> saveMalwareFileList(List<SignatureAndFile> signatureAndFileList, Long loginMemberId) {

        List<String> signatureList = signatureAndFileList.stream()
                .map(signatureAndFile -> signatureAndFile.getSignature())
                .collect(Collectors.toList());

        List<Malwarefile> savedMalwareFileList = dslMalwareFileRepository.findAllBySignatureList(signatureList);  //이미 저장된 같은 파일들을 찾는다.

        SignatureFileMap<Malwarefile> signatureMalwareFileMap = new SignatureFileMap<>();
        savedMalwareFileList.stream().forEach(malwareFile -> {
            signatureMalwareFileMap.insert(malwareFile.getSignature(), malwareFile);
        });

        List<Malwarefile> newMalwareFileList = signatureAndFileList.stream()
                .filter(signatureAndFile ->signatureMalwareFileMap.existBySignature(signatureAndFile.getSignature()))
                .map(signatureAndFile -> {
                    String signature = signatureAndFile.getSignature();
                    String storeFilename = localStoreManager.save(signatureAndFile.getMultipartFile());
                    Malwarefile malwareFile = Malwarefile.builder()
                            .signature(signature)
                            .storeFilename(storeFilename)
                            .build();
                    return malwareFile;
                }).collect(Collectors.toList());

        malwareFileBulkRepository.saveAll(newMalwareFileList, loginMemberId);

        List<Malwarefile> malwareFileList = Stream.of(savedMalwareFileList, newMalwareFileList)
                .flatMap(x -> x.stream())
                .collect(Collectors.toList());

        return malwareFileList;
    }
}