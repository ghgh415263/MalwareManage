package com.malclean.admin.application.malware.malwarefile;

import com.malclean.admin.domain.malware.malwarefile.DslMalwareFileRepository;
import com.malclean.admin.domain.malware.malwarefile.MalwareFile;
import com.malclean.admin.domain.malware.malwarefile.MalwareFileRepository;
import com.malclean.admin.domain.malware.malware.MalwareMalwareFileMap;
import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.malware.malware.MalwareMalwareFileMapRepository;
import com.malclean.admin.infrastructure.malware.malwarefile.SignatureUtils;
import com.malclean.admin.infrastructure.malware.malwarefile.store.LocalStoreManager;
import com.malclean.admin.infrastructure.malware.malwarefile.store.LocalStorePath;
import com.malclean.admin.domain.malware.malwarefile.service.StoreManager;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareFileSaveService {

    private final MalwareFileRepository malwareFileRepository;

    private final DslMalwareFileRepository dslMalwareFileRepository;

    private final MalwareMalwareFileMapRepository malwareMalwareFileMapRepository;

    private final StoreManager localStoreManager;

    @Transactional
    public void saveMalwareFileList(Malware malware, List<MultipartFile> fileList) {

        List<SignatureAndFile> signatureMultipartFileList = fileList.stream()
                .map(file -> new SignatureAndFile(new SignatureUtils().createSignature(file), file))
                .collect(Collectors.toList());


        List<String> newSignatureList = signatureMultipartFileList.stream()
                .map(signatureMultipartFile -> signatureMultipartFile.getSignature())
                .collect(Collectors.toList());
        List<MalwareFile> savedMalwareFileList = dslMalwareFileRepository.findAllBySignatureList(newSignatureList);  //이미 저장된 같은 파일들을 찾는다.


        Map<String, MalwareFile> signatureMalwareFileMap = savedMalwareFileList.stream().collect(Collectors.toMap(
                malwarefile -> malwarefile.getSignature(),
                malwarefile -> malwarefile
        ));


        Map<Boolean,List<SignatureAndFile>> partitionedMap = signatureMultipartFileList.stream().collect(Collectors.partitioningBy(signatureAndFile -> signatureMalwareFileMap.containsKey(signatureAndFile.getSignature())));
        List<SignatureAndFile> alreadySavedList = partitionedMap.get(true);
        List<SignatureAndFile> notSavedList = partitionedMap.get(false);


        alreadySavedList.stream().forEach(
                entry -> {
                    MultipartFile file = entry.getMultipartFile();
                    String fileSignature = entry.getSignature();
                    MalwareFile malwareFile = signatureMalwareFileMap.get(fileSignature);
                    MalwareMalwareFileMap map = MalwareMalwareFileMap.builder()
                            .malware(malware)
                            .malwareFile(malwareFile)
                            .filename(file.getOriginalFilename())
                            .build();
                    malwareMalwareFileMapRepository.save(map);
                }
        );


        notSavedList.stream().forEach(
                entry -> {
                    MultipartFile file = entry.getMultipartFile();
                    String fileSignature = entry.getSignature();
                    String storeFilename = localStoreManager.save(file);
                    MalwareFile malwareFile = MalwareFile.builder()
                            .signature(fileSignature)
                            .storeFilename(storeFilename)
                            .build();
                    malwareFileRepository.save(malwareFile);

                    MalwareMalwareFileMap map = MalwareMalwareFileMap.builder()
                            .malware(malware)
                            .malwareFile(malwareFile)
                            .filename(file.getOriginalFilename())
                            .build();
                    malwareMalwareFileMapRepository.save(map);
                });
    }

    @Getter
    static class SignatureAndFile{
        private String signature;
        private MultipartFile multipartFile;

        public SignatureAndFile(String signature, MultipartFile multipartFile) {
            this.signature = signature;
            this.multipartFile = multipartFile;
        }
    }
}