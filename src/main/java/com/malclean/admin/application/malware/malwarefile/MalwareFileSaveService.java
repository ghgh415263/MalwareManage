package com.malclean.admin.application.malware.malwarefile;

import com.malclean.admin.domain.malware.malwarefile.DslMalwareFileRepository;
import com.malclean.admin.domain.malware.malwarefile.MalwareFile;
import com.malclean.admin.domain.malware.malwaremalwarefilemap.MalwareMalwareFileMap;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.malware.malwaremalwarefilemap.MalwareMalwareFileMapRepository;
import com.malclean.admin.domain.malware.malwarefile.MalwareFileRepository;
import com.malclean.admin.infrastructure.malware.malwarefile.SignatureUtils;
import com.malclean.admin.infrastructure.malware.malwarefile.store.LocalStoreManager;
import com.malclean.admin.infrastructure.malware.malwarefile.store.LocalStorePath;
import com.malclean.admin.domain.malware.malwarefile.service.StoreManager;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareFileSaveService {

    private final MalwareFileRepository malwareFileRepository;

    private final DslMalwareFileRepository dslMalwareFileRepository;

    private final MalwareMalwareFileMapRepository malwareMalwareFileMapRepository;

    private final StoreManager localStoreManager = new LocalStoreManager(LocalStorePath.malwarefileDir);

    @Transactional
    public void saveMalwareFileList(Malware malware, List<MultipartFile> fileList) {

        Map<String, MultipartFile> signatureMultipartFileMap = fileList.stream().collect(Collectors.toMap(
                file -> new SignatureUtils().createSignature(file),
                file -> file
        ));

        List<String> newSignatureList = signatureMultipartFileMap.keySet().stream().collect(Collectors.toList());
        List<MalwareFile> savedMalwareFileList = dslMalwareFileRepository.findAllBySignatureList(newSignatureList);

        saveFileAndMakeMapTable(malware, signatureMultipartFileMap, savedMalwareFileList);
    }

    private void saveFileAndMakeMapTable(Malware malware, Map<String, MultipartFile> signatureMultipartFileMap, List<MalwareFile> savedMalwareFileList) {
        Map<String, MalwareFile> signatureMalwareFileMap = savedMalwareFileList.stream().collect(Collectors.toMap(
                malwarefile -> malwarefile.getSignature(),
                malwarefile -> malwarefile
        ));

        Map<Boolean,List<Map.Entry<String, MultipartFile>>> partitionedEntryList = signatureMultipartFileMap.entrySet().stream().collect(Collectors.partitioningBy(entry -> signatureMalwareFileMap.containsKey(entry.getKey())));
        List<Map.Entry<String, MultipartFile>> alreadySavedList = partitionedEntryList.get(true);
        List<Map.Entry<String, MultipartFile>> notSavedList = partitionedEntryList.get(false);

        alreadySavedList.stream().forEach(
                entry -> {
                    MultipartFile file = entry.getValue();
                    String fileSignature = entry.getKey();
                    MalwareFile malwareFile = signatureMalwareFileMap.get(fileSignature);
                    MalwareMalwareFileMap map = MalwareMalwareFileMap.builder()
                            .malware(malware)
                            .malwareFile(malwareFile)
                            .filename(file.getOriginalFilename())
                            .build();
                    malwareMalwareFileMapRepository.save(map);
                }
        );

        notSavedList.stream().forEach(
                entry -> {
                    MultipartFile file = entry.getValue();
                    String fileSignature = entry.getKey();
                    String storeFilename = localStoreManager.save(file);
                    MalwareFile malwareFile = MalwareFile.builder()
                            .signature(fileSignature)
                            .storeFilename(storeFilename)
                            .build();
                    malwareFileRepository.save(malwareFile);

                    MalwareMalwareFileMap map = MalwareMalwareFileMap.builder()
                            .malware(malware)
                            .malwareFile(malwareFile)
                            .filename(file.getOriginalFilename())
                            .build();
                    malwareMalwareFileMapRepository.save(map);
                });
    }
}
