package com.malclean.admin.application.malware.malware;

import com.malclean.admin.application.malware.MalwarefileFacade;
import com.malclean.admin.application.malware.malware.requestdto.MalwareSaveRequest;
import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.malware.malware.repository.MalwareRepository;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareSaveService {

    private final MalwareRepository malwareRepository;

    private final MalwareValidationService malwareValidationService;

    private final MalwarefileFacade malwarefileFacade;

    @Transactional
    public Long saveMalware(MalwareSaveRequest malwareSaveRequest, Long loginMemberId) {

        malwareValidationService.validateForSave(malwareSaveRequest.getTitle(), malwareSaveRequest.getNickname());

        Malware malware = Malware.builder()
                .title(malwareSaveRequest.getTitle())
                .content(malwareSaveRequest.getContent())
                .nickname(malwareSaveRequest.getNickname())
                .riskness(RisknessType.toEnumType(malwareSaveRequest.getRiskness()))
                .malwarePurposeList(malwareSaveRequest.getPurposeList())
                .malwareBehaviorList(malwareSaveRequest.getBehaviorList())
                .detectedTime(malwareSaveRequest.getDetectedTime())
                .resolvedTime(malwareSaveRequest.getResolvedTime())
                .build();

        malwareRepository.save(malware);

        if (!malwareSaveRequest.getMultipartFileList().isEmpty()) {
            malwarefileFacade.saveWithMalwareMalwarefile(malwareSaveRequest.getMultipartFileList(), malware, loginMemberId);
        }

        return malware.getId();
    }
}
