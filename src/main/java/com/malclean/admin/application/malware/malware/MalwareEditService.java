package com.malclean.admin.application.malware.malware;

import com.malclean.admin.application.common.exception.NotExistEntityException;
import com.malclean.admin.application.malware.malware.requestdto.MalwareEditReq;
import com.malclean.admin.domain.malware.malware.*;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import com.malclean.admin.domain.malware.malware.enums.BehaviorType;
import com.malclean.admin.domain.malware.malware.enums.PurposeType;
import com.malclean.admin.domain.malware.malware.repository.MalwareMalwarefileRepository;
import com.malclean.admin.domain.malware.malware.repository.MalwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareEditService {

    private final MalwareRepository malwareRepository;

    private final MalwareMalwarefileRepository malwareMalwarefileRepository;

    private final MalwarefileFacade malwarefileFacade;

    private final MalwareValidationService malwareValidationService;

    @Transactional
    public void editMalware(Long malwareId, MalwareEditReq malwareEditReq, Long loginMemberId) {

        Malware malware = malwareRepository.findById(malwareId)
                .orElseThrow(NotExistEntityException::new);

        malwareValidationService.validateForEdit(malware, malwareEditReq.getTitle(), malwareEditReq.getNickname());

        malware.editTitle(malwareEditReq.getTitle());
        malware.editContent(malwareEditReq.getContent());
        malware.editNickname(malwareEditReq.getNickname());
        RisknessType risknessType = RisknessType.toEnumType(malwareEditReq.getRiskness());
        malware.editRisknessType(risknessType);
        malware.editDetectedTime(malwareEditReq.getDetectedTime());
        malware.editResolvedTime(malwareEditReq.getResolvedTime());

        List<MalwarePurpose> newMalwarePurposeList = malwareEditReq.getPurposeList().stream()
                .map((stringPurpose) ->
                        new MalwarePurpose(malware, PurposeType.toEnumType(stringPurpose))
                ).collect(Collectors.toList());

        List<MalwareBehavior> newMalwareBehaviorList = malwareEditReq.getBehaviorList().stream()
                .map((stringBehavior) ->
                        new MalwareBehavior(malware, BehaviorType.toEnumType(stringBehavior))
                ).collect(Collectors.toList());

        malware.replacePurposeList(newMalwarePurposeList);
        malware.replaceBehaviorList(newMalwareBehaviorList);

        if (!malwareEditReq.getDeletedFileIdList().isEmpty())
            malwareMalwarefileRepository.deleteAllByMalwareIdAndIds(malwareId, malwareEditReq.getDeletedFileIdList());

        if (!malwareEditReq.getMultipartFileList().isEmpty()){
            malwarefileFacade.saveWithMalwareMalwarefile(malwareEditReq.getMultipartFileList(), malware, loginMemberId);
        }
    }
}
