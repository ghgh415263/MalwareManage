package com.malclean.admin.application.malware.malware;

import com.malclean.admin.application.malware.malware.requestdto.MalwareEditRequest;
import com.malclean.admin.application.malware.malwarefile.MalwareFileSaveService;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.malware.malware.MalwareBehavior;
import com.malclean.admin.domain.malware.malware.MalwarePurpose;
import com.malclean.admin.domain.malware.malware.enums.BehaviorType;
import com.malclean.admin.domain.malware.malware.enums.PurposeType;
import com.malclean.admin.domain.malware.malwaremalwarefilemap.MalwareMalwareFileMapRepository;
import com.malclean.admin.domain.malware.malware.repository.MalwareBehaviorRepository;
import com.malclean.admin.domain.malware.malware.repository.MalwarePurposeRepository;
import com.malclean.admin.domain.malware.malware.repository.MalwareRepository;
import com.malclean.admin.infrastructure.member.MemberRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityNotFoundException;
import java.util.List;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareEditService {

    private final MalwareRepository malwareRepository;

    private final MemberRepository memberRepository;

    private final MalwarePurposeRepository malwarePurposeRepository;

    private final MalwareBehaviorRepository malwareBehaviorRepository;

    private final MalwareMalwareFileMapRepository malwareMalwareFileMapRepository;

    private final MalwareFileSaveService malwareFileSaveService;


    @Transactional
    public void editMalware(Long malwareId, MalwareEditRequest malwareEditRequest, Long loginMemberId) {
        Malware malware = malwareRepository.findById(malwareId)
                .orElseThrow(()->new EntityNotFoundException());
        Member sessionMember = memberRepository.findById(loginMemberId)
                .orElseThrow(()->new EntityNotFoundException());
        List<MalwarePurpose> malwarePurposeList = malwarePurposeRepository.findAllByMalwareId(malwareId);
        List<MalwareBehavior> malwareBehaviorList = malwareBehaviorRepository.findAllByMalwareId(malwareId);
        malwarePurposeList.stream().forEach(malwarePurpose -> malwarePurposeRepository.delete(malwarePurpose));
        malwareBehaviorList.stream().forEach(malwareBehavior -> malwareBehaviorRepository.delete(malwareBehavior));
        malwareEditRequest.getDeletedFileIdList().stream().forEach((deletedFileId) -> malwareMalwareFileMapRepository.deleteByMalwareIdAndMalwareFileId(malwareId ,deletedFileId));

        malware.editTitle(malwareEditRequest.getTitle());
        malware.editContent(malwareEditRequest.getContent());
        malware.editNickname(malwareEditRequest.getNickname());
        malware.editRisknessType(malwareEditRequest.getRiskness());
        malware.editDetectedTime(malwareEditRequest.getDetectedTime());
        malware.editResolvedTime(malwareEditRequest.getResolvedTime());

        for(PurposeType purpose : malwareEditRequest.getPurposeList()){
            MalwarePurpose malwarePurpose = new MalwarePurpose(malware, purpose);
            malwarePurposeRepository.save(malwarePurpose);
        }

        for(BehaviorType behavior : malwareEditRequest.getBehaviorList()){
            MalwareBehavior malwareBehavior = new MalwareBehavior(malware, behavior);
            malwareBehaviorRepository.save(malwareBehavior);
        }

        malwareFileSaveService.saveMalwareFileList(malware, sessionMember, malwareEditRequest.getMultipartFileList());
    }
}
