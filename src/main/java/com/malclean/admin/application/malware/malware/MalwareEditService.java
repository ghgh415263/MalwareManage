package com.malclean.admin.application.malware.malware;

import com.malclean.admin.application.malware.malware.requestdto.MalwareEditRequest;
import com.malclean.admin.application.malware.malwarefile.MalwareFileSaveService;
import com.malclean.admin.domain.malware.malware.*;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import com.malclean.admin.domain.malware.malware.enums.BehaviorType;
import com.malclean.admin.domain.malware.malware.enums.PurposeType;
import com.malclean.admin.domain.malware.malware.repository.DslMalwareMalwarefileRepository;
import com.malclean.admin.domain.malware.malware.repository.MalwareMalwarefileBulkRepository;
import com.malclean.admin.domain.malware.malware.repository.MalwareRepository;
import com.malclean.admin.domain.malware.malwarefile.Malwarefile;
import com.malclean.admin.domain.malware.malwarefile.MalwarefileRepository;
import com.malclean.admin.domain.malware.malwarefile.SignatureCreator;
import com.malclean.admin.domain.malware.malwarefile.SignatureMultipartfileMap;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityNotFoundException;
import java.util.List;
import java.util.stream.Collectors;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareEditService {

    private final MalwareRepository malwareRepository;

    private final MalwarefileRepository malwarefileRepository;

    private final DslMalwareMalwarefileRepository dslMalwareMalwarefileRepository;

    private final SignatureCreator signatureCreator;

    private final MalwareFileSaveService malwareFileSaveService;

    private final MalwareMalwarefileBulkRepository malwareMalwareFileBulkRepository;


    @Transactional
    public void editMalware(Long malwareId, MalwareEditRequest malwareEditRequest, Long loginMemberId) {
        Malware malware = malwareRepository.findById(malwareId)
                .orElseThrow(()->new EntityNotFoundException());

        dslMalwareMalwarefileRepository.deleteAll(malwareId, malwareEditRequest.getDeletedFileIdList());

        malware.editTitle(malwareEditRequest.getTitle());
        malware.editContent(malwareEditRequest.getContent());
        malware.editNickname(malwareEditRequest.getNickname());
        RisknessType risknessType = RisknessType.toEnumType(malwareEditRequest.getRiskness());
        malware.editRisknessType(risknessType);
        malware.editDetectedTime(malwareEditRequest.getDetectedTime());
        malware.editResolvedTime(malwareEditRequest.getResolvedTime());

        List<MalwarePurpose> newMalwarePurposeList = malwareEditRequest.getPurposeList().stream()
                .map((stringPurpose) ->
                        new MalwarePurpose(malware, PurposeType.toEnumType(stringPurpose))
                ).collect(Collectors.toList());

        List<MalwareBehavior> newMalwareBehaviorList = malwareEditRequest.getBehaviorList().stream()
                .map((stringBehavior) ->
                        new MalwareBehavior(malware, BehaviorType.toEnumType(stringBehavior))
                ).collect(Collectors.toList());

        malware.replacePurposeList(newMalwarePurposeList);
        malware.replaceBehaviorList(newMalwareBehaviorList);

        SignatureMultipartfileMap signatureMultipartfileMap =
                new SignatureMultipartfileMap(signatureCreator, malwareEditRequest.getMultipartFileList());

        malwareFileSaveService.saveMalwareFileList(signatureMultipartfileMap, loginMemberId);

        List<Malwarefile> malwareFileList = malwarefileRepository.findBySignatureIn(signatureMultipartfileMap.getSignatureList());

        List<MalwareMalwarefile> malwareMalwarefileList = malwareFileList.stream().map(
                malwareFile -> {
                    String filename = signatureMultipartfileMap.get(malwareFile.getSignature()).getOriginalFilename();
                    return MalwareMalwarefile.builder()
                            .malwarefile(malwareFile)
                            .malware(malware)
                            .filename(filename)
                            .build();
                }).collect(Collectors.toList());

        malwareMalwareFileBulkRepository.saveAll(malwareMalwarefileList, loginMemberId);
    }
}
