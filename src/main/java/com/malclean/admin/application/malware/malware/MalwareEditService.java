package com.malclean.admin.application.malware.malware;

import com.malclean.admin.application.malware.malware.requestdto.MalwareEditRequest;
import com.malclean.admin.application.malware.malwarefile.MalwareFileSaveService;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.malware.malware.MalwareBehavior;
import com.malclean.admin.domain.malware.malware.MalwarePurpose;
import com.malclean.admin.domain.malware.malware.enums.BehaviorType;
import com.malclean.admin.domain.malware.malware.enums.PurposeType;
import com.malclean.admin.domain.malware.malwaremalwarefilemap.MalwareMalwareFileMapRepository;
import com.malclean.admin.infrastructure.malware.malware.MalwareRepository;
import com.malclean.admin.infrastructure.member.MemberRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import javax.persistence.EntityNotFoundException;
import java.util.List;
import java.util.stream.Collectors;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareEditService {

    private final MalwareRepository malwareRepository;

    private final MemberRepository memberRepository;

    private final MalwareMalwareFileMapRepository malwareMalwareFileMapRepository;

    private final MalwareFileSaveService malwareFileSaveService;


    @Transactional
    public void editMalware(Long malwareId, MalwareEditRequest malwareEditRequest, Long loginMemberId) {
        Malware malware = malwareRepository.findById(malwareId)
                .orElseThrow(()->new EntityNotFoundException());
        Member sessionMember = memberRepository.findById(loginMemberId)
                .orElseThrow(()->new EntityNotFoundException());

        malwareEditRequest.getDeletedFileIdList().stream().forEach((deletedFileId) -> malwareMalwareFileMapRepository.deleteByMalwareIdAndMalwareFileId(malwareId ,deletedFileId));  /* todo n:m 관계는 어떻게 어그리거트를 만드는 것이 맞는지 알아보고 리펙토링 */

        malware.editTitle(malwareEditRequest.getTitle());
        malware.editContent(malwareEditRequest.getContent());
        malware.editNickname(malwareEditRequest.getNickname());
        RisknessType risknessType = RisknessType.toEnumType(malwareEditRequest.getRiskness());
        malware.editRisknessType(risknessType);
        malware.editDetectedTime(malwareEditRequest.getDetectedTime());
        malware.editResolvedTime(malwareEditRequest.getResolvedTime());

        List<MalwarePurpose> newMalwarePurposeList = malwareEditRequest.getPurposeList().stream()
                .map((stringPurpose) ->
                        new MalwarePurpose(null, PurposeType.toEnumType(stringPurpose))
                ).collect(Collectors.toList());

        List<MalwareBehavior> newMalwareBehaviorList = malwareEditRequest.getBehaviorList().stream()
                .map((stringBehavior) ->
                        new MalwareBehavior(null, BehaviorType.toEnumType(stringBehavior))
                ).collect(Collectors.toList());

        malware.replacePurposeList(newMalwarePurposeList);

        malware.replaceBehaviorList(newMalwareBehaviorList);

        if (!CollectionUtils.isEmpty(malwareEditRequest.getMultipartFileList()))
            malwareFileSaveService.saveMalwareFileList(malware, malwareEditRequest.getMultipartFileList());
    }
}
