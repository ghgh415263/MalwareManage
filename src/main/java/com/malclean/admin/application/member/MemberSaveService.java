package com.malclean.admin.application.member;

import com.malclean.admin.application.member.requestdto.MemberSaveRequest;
import com.malclean.admin.domain.member.*;
import com.malclean.admin.infrastructure.member.PasswordEncoder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@RequiredArgsConstructor
@Slf4j
@Service
public class MemberSaveService {

    private final MemberRepository memberRepository;
    private final MemberCheckService memberCheckService;
    private final PasswordEncoder passwordEncoder;
    private final PasswordMeter passwordMeter;

    @Transactional
    public void saveMember(MemberSaveRequest memberSaveRequest) {

        passwordMeter.check(memberSaveRequest.getPassword());

        memberCheckService.checkDuplicateUsername(memberSaveRequest.getUsername());

        String encodedPassword = passwordEncoder.hashPassword(memberSaveRequest.getPassword());

        AuthorityType authorityType = AuthorityType.toEnumType(memberSaveRequest.getAuthority());

        DepartmentType departmentType = DepartmentType.toEnumType(memberSaveRequest.getDepartment());

        Member newMember = Member.builder()
                .username(memberSaveRequest.getUsername())
                .password(encodedPassword)
                .authority(authorityType)
                .employeeId(memberSaveRequest.getEmployeeId())
                .department(departmentType)
                .build();

        memberRepository.save(newMember);  //같은 유저네임의 insert가 중복될 경우, 그냥 시스템오류라고 띄워주는 것이 좋다.
    }
}
