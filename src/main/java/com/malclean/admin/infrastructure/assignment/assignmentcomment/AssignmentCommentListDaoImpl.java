package com.malclean.admin.infrastructure.assignment.assignmentcomment;

import com.malclean.admin.dao.assignment.assignmentcomment.AssignmentCommentInPage;
import com.malclean.admin.dao.assignment.assignmentcomment.AssignmentCommentListDao;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import java.util.List;

import static com.malclean.admin.domain.assignment.assignmentcomment.QAssignmentComment.assignmentComment;
import static com.malclean.admin.domain.member.QMember.member;

@Slf4j
@Repository
public class AssignmentCommentListDaoImpl implements AssignmentCommentListDao {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public AssignmentCommentListDaoImpl(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    @Override
    public Page<AssignmentCommentInPage> findPage(Long assignmentId, Long memberId, Pageable pageable){

        List<AssignmentCommentInPage> findedList = query
                .select(Projections.constructor(AssignmentCommentInPage.class, assignmentComment.id, assignmentComment.content, member.id, member.username, member.id.eq(memberId)))
                .from(assignmentComment)
                .innerJoin(member)
                .on(assignmentComment.createdBy.eq(member.id))
                .where(assignmentComment.malwareAssignment.id.eq(assignmentId))
                .orderBy(assignmentComment.id.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        Long totalCount = query
                .select(assignmentComment.count())
                .from(assignmentComment)
                .where(assignmentComment.malwareAssignment.id.eq(assignmentId))
                .fetchOne();

        return new PageImpl<>(findedList, pageable, totalCount);
    };
}
