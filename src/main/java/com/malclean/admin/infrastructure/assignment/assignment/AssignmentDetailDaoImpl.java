package com.malclean.admin.infrastructure.assignment.assignment;

import com.malclean.admin.dao.assignment.assignment.AssignmentAttachmentRes;
import com.malclean.admin.dao.assignment.assignment.AssignmentDetailDao;
import com.malclean.admin.dao.assignment.assignment.AssignmentDetailRes;
import com.malclean.admin.domain.assignment.assignment.AssignmentStatusType;
import com.malclean.admin.domain.member.QMember;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import static com.malclean.admin.domain.assignment.assignment.QMalwareAssignment.malwareAssignment;
import static com.malclean.admin.domain.assignment.assignmentattachment.QAssignmentAttachment.assignmentAttachment;
import static com.malclean.admin.domain.malware.malware.QMalware.malware;
import static java.util.stream.Collectors.*;

@RequiredArgsConstructor
@Repository
public class AssignmentDetailDaoImpl implements AssignmentDetailDao {

    private final JPAQueryFactory query;

    @Override
    public Optional<AssignmentDetailRes> getDetail(Long id) {

        QMember assigner = new QMember("assigner");
        QMember assignee = new QMember("assignee");
        QMember attachmentUploader = new QMember("uploader");

        List<AssignmentFlat> flatResList = query
                .select(
                        Projections.constructor(
                                AssignmentFlat.class,
                                malwareAssignment.id,
                                assigner.id,
                                assigner.username,
                                assignee.id,
                                assignee.username,
                                malware.id,
                                malware.nickname,
                                malware.title,
                                malwareAssignment.title,
                                malwareAssignment.content,
                                malwareAssignment.assignmentStatus,
                                malwareAssignment.estimatedTime,
                                assignmentAttachment.id,
                                assignmentAttachment.createdBy,
                                attachmentUploader.username,
                                assignmentAttachment.filename
                        )
                )
                .from(malwareAssignment)
                .leftJoin(assigner)
                .on(malwareAssignment.assignerId.eq(assigner.id))
                .leftJoin(assignee)
                .on(malwareAssignment.createdBy.eq(assignee.id))
                .leftJoin(malware)
                .on(malwareAssignment.malware.id.eq(malware.id))
                .leftJoin(assignmentAttachment)
                .on(malwareAssignment.id.eq(assignmentAttachment.malwareAssignment.id))
                .leftJoin(attachmentUploader)
                .on(assignmentAttachment.createdBy.eq(attachmentUploader.id))
                .where(malwareAssignment.id.eq(id))
                .fetch();

        return flatResList.stream()
                .collect(
                        groupingBy(o -> new AssignmentDetailRes(o.getAssignmentId(), o.getAssignerId(), o.getAssignerUsername(), o.getAssigneeId(), o.getAssigneeUsername(), o.getMalwareId(), o.getMalwareNickname(), o.getMalwareTitle(), o.getTitle(), o.getContent(), o.getAssignmentStatus(), o.getEstimatedTime()),
                                mapping(o -> new AssignmentAttachmentRes(o.getId(), o.getUploaderId(), o.getUploaderUsername(), o.getFilename()),
                                        toList())))
                .entrySet().stream()
                .map(e -> new AssignmentDetailRes(e.getKey().getAssignmentId(), e.getKey().getAssignerId(), e.getKey().getAssignerUsername(), e.getKey().getAssigneeId(), e.getKey().getAssigneeUsername(), e.getKey().getMalwareId(), e.getKey().getMalwareNickname(), e.getKey().getMalwareTitle(), e.getKey().getTitle(), e.getKey().getContent(), e.getKey().getAssignmentStatus(), e.getKey().getEstimatedTime(), e.getValue()))
                .findFirst();
    }

    @Getter
    public static class AssignmentFlat {
        private Long assignmentId;

        private Long assignerId;

        private String assignerUsername;

        private Long assigneeId;

        private String assigneeUsername;

        private Long malwareId;

        private String malwareNickname;

        private String malwareTitle;

        private String title;

        private String content;

        private AssignmentStatusType assignmentStatus;

        private LocalDateTime estimatedTime;

        private Long id;

        private Long uploaderId;

        private String uploaderUsername;

        private String filename;

        public AssignmentFlat(Long assignmentId, Long assignerId, String assignerUsername, Long assigneeId, String assigneeUsername, Long malwareId, String malwareNickname, String malwareTitle, String title, String content, AssignmentStatusType assignmentStatus, LocalDateTime estimatedTime, Long id, Long uploaderId, String uploaderUsername, String filename) {
            this.assignmentId = assignmentId;
            this.assignerId = assignerId;
            this.assignerUsername = assignerUsername;
            this.assigneeId = assigneeId;
            this.assigneeUsername = assigneeUsername;
            this.malwareId = malwareId;
            this.malwareNickname = malwareNickname;
            this.malwareTitle = malwareTitle;
            this.title = title;
            this.content = content;
            this.assignmentStatus = assignmentStatus;
            this.estimatedTime = estimatedTime;
            this.id = id;
            this.uploaderId = uploaderId;
            this.uploaderUsername = uploaderUsername;
            this.filename = filename;
        }
    }
}
