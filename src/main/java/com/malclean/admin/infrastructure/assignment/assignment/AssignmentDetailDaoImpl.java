package com.malclean.admin.infrastructure.assignment.assignment;

import com.malclean.admin.application.assignment.assignment.responsedto.AssignmentDetailResponse;
import com.malclean.admin.domain.assignment.assignment.AssignmentDetailDao;
import com.malclean.admin.domain.member.QMember;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;

import java.util.List;
import java.util.Optional;

import static com.malclean.admin.domain.assignment.assignment.QMalwareAssignment.malwareAssignment;
import static com.malclean.admin.domain.assignment.assignmentattachment.QAssignmentAttachment.assignmentAttachment;
import static com.querydsl.core.group.GroupBy.groupBy;
import static com.querydsl.core.group.GroupBy.list;

@Slf4j
@Repository
public class AssignmentDetailDaoImpl implements AssignmentDetailDao {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public AssignmentDetailDaoImpl(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    @Override
    public Optional<AssignmentDetailResponse> getDetail(Long id) {

        QMember assigner = new QMember("assigner");
        QMember assignee = new QMember("assignee");
        QMember attachmentUploader = new QMember("uploader");

        List<AssignmentDetailResponse> transform = query
                .selectFrom(malwareAssignment)
                .from(malwareAssignment)
                .leftJoin(assigner)
                .on(malwareAssignment.assignerId.eq(assigner.id))
                .leftJoin(assignee)
                .on(malwareAssignment.createdBy.eq(assignee.id))
                .leftJoin(assignmentAttachment)
                .on(malwareAssignment.id.eq(assignmentAttachment.malwareAssignment.id))
                .leftJoin(attachmentUploader)
                .on(assignmentAttachment.createdBy.eq(attachmentUploader.id))
                .where(malwareAssignment.id.eq(id))
                .transform(
                        groupBy(malwareAssignment.id)
                                .list(Projections.constructor(AssignmentDetailResponse.class,
                                        malwareAssignment,
                                        assigner.username,
                                        assignee.username,
                                        list(Projections.constructor(AssignmentDetailResponse.AssignmentAttachmentResponse.class, assignmentAttachment, attachmentUploader.username))
                                        )
                                )
                );

        if (transform.size() == 0)
            return Optional.empty();

        return Optional.ofNullable(transform.get(0));
    }
}
