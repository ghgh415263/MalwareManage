package com.malclean.admin.infrastructure.assignment.assignment;

import com.malclean.admin.application.assignment.assignment.responsedto.AssignmentDetailResponse;
import com.malclean.admin.domain.assignment.assignment.AssignmentAttachment;
import com.malclean.admin.domain.assignment.assignment.AssignmentDetailDao;
import com.malclean.admin.domain.assignment.assignment.MalwareAssignment;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

import static com.malclean.admin.domain.assignment.assignment.QAssignmentAttachment.assignmentAttachment;
import static com.malclean.admin.domain.assignment.assignment.QMalwareAssignment.malwareAssignment;
import static com.querydsl.core.group.GroupBy.groupBy;
import static com.querydsl.core.group.GroupBy.list;

@Slf4j
@Repository
public class AssignmentDetailDaoImpl implements AssignmentDetailDao {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public AssignmentDetailDaoImpl(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    @Override
    public Optional<AssignmentDetailResponse> getDetail(Long id) {

        Map<MalwareAssignment, List<AssignmentAttachment>> transform = query
                .from(malwareAssignment)
                .leftJoin(assignmentAttachment)
                .on(malwareAssignment.id.eq(assignmentAttachment.malwareAssignment.id))
                .where(malwareAssignment.id.eq(id))
                .transform(groupBy(malwareAssignment).as(list(assignmentAttachment)));

        if (transform.size() == 0)
            return Optional.empty();

        AssignmentDetailResponse assignmentDetailResponse = transform.entrySet().stream()
                .map(entry ->
                    new AssignmentDetailResponse(entry.getKey(), entry.getValue())
                ).collect(Collectors.toList()).get(0);

        return Optional.ofNullable(assignmentDetailResponse);
    }
}
