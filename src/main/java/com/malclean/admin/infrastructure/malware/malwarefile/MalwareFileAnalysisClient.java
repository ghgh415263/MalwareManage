package com.malclean.admin.infrastructure.malware.malwarefile;

import com.malclean.admin.domain.malware.malwarefile.MalwareFile;
import com.malclean.admin.infrastructure.common.json.JsonConverter;
import com.malclean.admin.domain.malware.malwarefile.MalwareFileRepository;
import com.malclean.admin.domain.malware.malwarefile.service.ApiOutput;
import com.malclean.admin.domain.malware.malwarefile.service.MalwareFileAnalysisAnalyzer;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareFileAnalysisClient implements MalwareFileAnalysisAnalyzer {
    private final MalwareFileRepository malwareFileRepository;

    private final JsonConverter jsonConverter;

    private final WebClient webClient;

    @Override
    public ApiOutput analyzeMalwareFile(Long id) {
        MalwareFile malwareFile = malwareFileRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("엔티티가 존재하지 않음"));

        ApiRequest apiRequest = new ApiRequest(malwareFile.getStoreFilename(), 1);

        log.info(jsonConverter.ObjectToJson(apiRequest));

        ApiOutput apiOutput = webClient.post()
                .uri("/analyze")
                .accept(MediaType.APPLICATION_JSON)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(jsonConverter.ObjectToJson(apiRequest))
                .retrieve()
                .bodyToMono(ApiOutput.class)
                .block();

        return apiOutput;
    }

    @Getter
    static class ApiRequest {
        String storeFilename;
        Integer analysisModelId;

        public ApiRequest(String storeFilename, Integer analysisModelId) {
            this.storeFilename = storeFilename;
            this.analysisModelId = analysisModelId;
        }
    }
}
