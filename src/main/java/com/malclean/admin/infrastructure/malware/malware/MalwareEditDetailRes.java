package com.malclean.admin.infrastructure.malware.malware;

import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.malware.malware.MalwareMalwarefile;
import lombok.Getter;
import org.springframework.format.annotation.DateTimeFormat;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Getter
public class MalwareEditDetailRes {

    private Long id;

    private String nickname;

    private String title;

    private String content;

    private String riskness;

    @DateTimeFormat(pattern="yyyy-MM-dd'T'HH:mm")
    private LocalDateTime resolvedTime;

    @DateTimeFormat(pattern="yyyy-MM-dd'T'HH:mm")
    private LocalDateTime detectedTime;

    private List<String> purposeList;

    private List<String> behaviorList;


    private List<MalwareFileInMalware> malwareFileInPageList;

    public MalwareEditDetailRes(Malware malware, List<MalwareMalwarefile> malwareMalwarefiles){
        this.id = malware.getId();
        this.nickname = malware.getNickname();
        this.title = malware.getTitle();
        this.content = malware.getContent();
        this.riskness = malware.getRiskness().getKey();
        this.resolvedTime = malware.getResolvedTime();
        this.detectedTime = malware.getDetectedTime();
        purposeList = malware.getMalwarePurposeList().stream()
                .map(purpose -> purpose.getPurpose().getKey())
                .collect(Collectors.toList());

        behaviorList = malware.getMalwareBehaviorList().stream()
                .map(behavior -> behavior.getBehavior().getKey())
                .collect(Collectors.toList());

        malwareFileInPageList = malwareMalwarefiles.stream()
                .map(malwareMalwareFileMap -> {
                    return new MalwareFileInMalware(malwareMalwareFileMap);
                })
                .collect(Collectors.toList());
    }

    @Getter
    static class MalwareFileInMalware {

        private Long id;

        private String filename;

        private String signature;

        public MalwareFileInMalware(MalwareMalwarefile malwareMalwareFile) {
            id = malwareMalwareFile.getId();
            filename = malwareMalwareFile.getFilename();
            signature = malwareMalwareFile.getMalwarefile().getSignature();
        }
    }
}
