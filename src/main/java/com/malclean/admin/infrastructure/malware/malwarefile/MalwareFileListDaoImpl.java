package com.malclean.admin.infrastructure.malware.malwarefile;


import com.malclean.admin.domain.malware.malwarefile.MalwareFileListDao;
import com.malclean.admin.domain.malware.malwarefile.requestdto.MalwareFileSearchRequest;
import com.malclean.admin.domain.malware.malwarefile.responsedto.MalwareFileInPage;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import javax.persistence.EntityManager;

import java.util.List;

import static com.malclean.admin.domain.malware.malware.QMalwareMalwarefile.malwareMalwarefile;
import static com.malclean.admin.domain.malware.malwarefile.QMalwarefile.malwarefile;

@Slf4j
@Repository
public class MalwareFileListDaoImpl implements MalwareFileListDao {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public MalwareFileListDaoImpl(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    @Override
    public Page<MalwareFileInPage> findBySearch(MalwareFileSearchRequest searchRequest, Pageable pageable) {

        BooleanBuilder builder = createSearchCondition(searchRequest);

        List<MalwareFileInPage> findedList = query
                .select(Projections.constructor(MalwareFileInPage.class, malwarefile)).distinct()
                .from(malwareMalwarefile)
                .innerJoin(malwareMalwarefile.malwarefile, malwarefile)
                .where(builder)
                .orderBy(malwarefile.createdTime.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        Long totalCount = query
                .select(malwarefile.count())
                .from(malwarefile)
                .where(builder)
                .fetchOne();

        return new PageImpl<>(findedList, pageable, totalCount);
    }

    private static BooleanBuilder createSearchCondition(MalwareFileSearchRequest searchRequest) {
        String signature = searchRequest.getSignature();
        String filename = searchRequest.getFilename();

        BooleanBuilder builder = new BooleanBuilder();

        if (StringUtils.hasText(signature)) {
            builder.and(malwarefile.signature.eq(signature));
        }

        if (StringUtils.hasText(filename)) {
            builder.and(malwareMalwarefile.filename.like("%"+filename+"%"));
        }

        return builder;
    }
}
