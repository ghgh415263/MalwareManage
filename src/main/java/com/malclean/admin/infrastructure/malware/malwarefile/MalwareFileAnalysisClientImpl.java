package com.malclean.admin.infrastructure.malware.malwarefile;

import com.malclean.admin.domain.common.ApiErrorResponse;
import com.malclean.admin.infrastructure.ApiErrorException;
import com.malclean.admin.domain.malware.malwarefile.service.MalwareFileAnalysisClient;
import com.malclean.admin.domain.malware.malwarefile.service.AnalysisResultRes;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

@RequiredArgsConstructor
@Service
public class MalwareFileAnalysisClientImpl implements MalwareFileAnalysisClient {

    private final WebClient.Builder webClientBuilder;

    @Override
    public AnalysisResultRes analyzeMalwareFile(String storeFilename, Integer modelId) {

        AnalysisApiRequest analysisApiRequest = new AnalysisApiRequest(storeFilename, modelId);

        AnalysisResultRes analysisResultRes = webClientBuilder.build().post()
                .uri("/analyze")
                .body(Mono.just(analysisApiRequest), AnalysisApiRequest.class)
                .retrieve()
                .onStatus(HttpStatus::isError,
                        clientResponse -> clientResponse.bodyToMono(ApiErrorResponse.class)
                                .flatMap(apiErrorResponse ->
                                    Mono.error(new ApiErrorException("악성코드파일 분석 API 에러"))
                                ))
                .bodyToMono(AnalysisResultRes.class)
                .block();

        return analysisResultRes;
    }

    @Getter
    static class AnalysisApiRequest {
        String storeFilename;
        Integer analysisModelId;

        public AnalysisApiRequest(String storeFilename, Integer analysisModelId) {
            this.storeFilename = storeFilename;
            this.analysisModelId = analysisModelId;
        }
    }
}
