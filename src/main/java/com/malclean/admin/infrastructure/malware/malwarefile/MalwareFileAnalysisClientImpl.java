package com.malclean.admin.infrastructure.malware.malwarefile;

import com.malclean.admin.common.exception.ApiErrorException;
import com.malclean.admin.domain.malware.malwarefile.service.MalwareFileAnalysisClient;
import com.malclean.admin.infrastructure.common.json.JsonConverter;
import com.malclean.admin.domain.malware.malwarefile.service.AnalysisResultResponse;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareFileAnalysisClientImpl implements MalwareFileAnalysisClient {

    private final JsonConverter jsonConverter;

    private final WebClient webClient;

    @Override
    public AnalysisResultResponse analyzeMalwareFile(String storeFilename, Integer modelId) {

        ApiRequest apiRequest = new ApiRequest(storeFilename, modelId);

        AnalysisResultResponse analysisResultResponse = webClient.post()
                .uri("/analyze")
                .accept(MediaType.APPLICATION_JSON)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(jsonConverter.ObjectToJson(apiRequest))
                .retrieve()
                .onStatus(HttpStatus::isError, clientResponse -> Mono.error(new ApiErrorException("악성코드파일 분석 API 에러")))
                .bodyToMono(AnalysisResultResponse.class)
                .block();

        return analysisResultResponse;
    }

    @Getter
    static class ApiRequest {
        String storeFilename;
        Integer analysisModelId;

        public ApiRequest(String storeFilename, Integer analysisModelId) {
            this.storeFilename = storeFilename;
            this.analysisModelId = analysisModelId;
        }
    }
}
