package com.malclean.admin.infrastructure.malware.malware;

import com.malclean.admin.domain.malware.malware.MalwareListDao;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import com.malclean.admin.domain.malware.malware.requestdto.MalwareSearchRequest;
import com.malclean.admin.domain.malware.malware.responsedto.MalwareInMalwareFilePage;
import com.malclean.admin.domain.malware.malware.responsedto.MalwareInPage;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import javax.persistence.EntityManager;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;

import static com.malclean.admin.domain.malware.malware.QMalware.malware;
import static com.malclean.admin.domain.malware.malware.QMalwareMalwarefile.malwareMalwarefile;
import static com.malclean.admin.domain.member.QMember.member;


@Slf4j
@Repository
public class MalwareListDaoImpl implements MalwareListDao {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public MalwareListDaoImpl(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    public Page<MalwareInPage> findBySearch(MalwareSearchRequest malwareSearchRequest, Pageable pageable) {

        BooleanBuilder builder = createSearchCondition(malwareSearchRequest);

        List<MalwareInPage> findedList = query
                .select(Projections.constructor(MalwareInPage.class, malware, member.username))
                .from(malware)
                .innerJoin(member)
                .on(malware.createdBy.eq(member.id))
                .where(builder)
                .orderBy(malware.createdTime.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        Long totalCount = query
                .select(malware.count())
                .from(malware)
                .innerJoin(member)
                .on(malware.createdBy.eq(member.id))
                .where(builder)
                .fetchOne();
        return new PageImpl<>(findedList, pageable, totalCount);
    }

    private static BooleanBuilder createSearchCondition(MalwareSearchRequest malwareSearchRequest) {
        String username = malwareSearchRequest.getUsername();
        String nickname = malwareSearchRequest.getNickname();
        String title = malwareSearchRequest.getTitle();
        RisknessType riskness = RisknessType.toEnumType(malwareSearchRequest.getRiskness());

        LocalDate startDate = malwareSearchRequest.getStartDate();
        LocalDate endDate = malwareSearchRequest.getEndDate();

        BooleanBuilder builder = new BooleanBuilder();
        if (StringUtils.hasText(username)) {
            builder.and(member.username.like("%"+username+"%"));
        }

        if (StringUtils.hasText(nickname)) {
            builder.and(malware.nickname.like("%"+nickname+"%"));
        }

        if (StringUtils.hasText(title)) {
            builder.and(malware.title.like("%"+title+"%"));
        }

        if (riskness != null) {
            builder.and(malware.riskness.eq(riskness));
        }

        if (startDate != null) {
            LocalDateTime startDateTime = startDate.atStartOfDay();
            builder.and(malware.detectedTime.after(startDateTime));
        }

        if (endDate != null) {
            LocalDateTime endDateTime = endDate.atTime(LocalTime.MAX);
            builder.and(malware.detectedTime.before(endDateTime));
        }
        return builder;
    }

    public Page<MalwareInMalwareFilePage> findByMalwareFileId(Long malwareFileId, Pageable pageable) {
        List<MalwareInMalwareFilePage> findedList = query
                .select(Projections.constructor(MalwareInMalwareFilePage.class, malware, malwareMalwarefile.filename))
                .from(malware)
                .innerJoin(member)
                .on(malware.createdBy.eq(member.id))
                .innerJoin(malwareMalwarefile)
                .on(malware.id.eq(malwareMalwarefile.malware.id))
                .where(malwareMalwarefile.malwarefile.id.eq(malwareFileId))
                .orderBy(malware.createdTime.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        Long totalCount = query
                .select(malware.count())
                .from(malware)
                .innerJoin(malwareMalwarefile)
                .on(malware.id.eq(malwareMalwarefile.malware.id))
                .where(malwareMalwarefile.malwarefile.id.eq(malwareFileId))
                .fetchOne();

        return new PageImpl<>(findedList, pageable, totalCount);
    }
}
