package com.malclean.admin.infrastructure.malware.malware;

import com.malclean.admin.dao.malware.malware.MalwareListDao;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import com.malclean.admin.dao.malware.malware.MalwareSearchRequest;
import com.malclean.admin.dao.malware.malware.MalwareInMalwareFilePage;
import com.malclean.admin.dao.malware.malware.MalwareInPage;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Projections;
import com.querydsl.core.types.dsl.BooleanExpression;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import javax.persistence.EntityManager;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;

import static com.malclean.admin.domain.announcement.QAnnouncement.announcement;
import static com.malclean.admin.domain.malware.malware.QMalware.malware;
import static com.malclean.admin.domain.malware.malware.QMalwareMalwarefile.malwareMalwarefile;
import static com.malclean.admin.domain.member.QMember.member;
import static org.springframework.util.StringUtils.hasText;


@RequiredArgsConstructor
@Repository
public class MalwareListDaoImpl implements MalwareListDao {

    private final JPAQueryFactory query;

    public Page<MalwareInPage> findBySearch(MalwareSearchRequest malwareSearchRequest, Pageable pageable) {

        List<MalwareInPage> findedList = query
                .select(Projections.constructor(MalwareInPage.class, malware, member.username))
                .from(malware)
                .innerJoin(member)
                .on(malware.createdBy.eq(member.id))
                .where(
                        usernameLike(malwareSearchRequest.getUsername()),
                        nicknameLike(malwareSearchRequest.getNickname()),
                        titleLike(malwareSearchRequest.getTitle()),
                        risknessEq(RisknessType.toEnumType(malwareSearchRequest.getRiskness())),
                        detectedTimeGoe(malwareSearchRequest.getStartDate()),
                        detectedTimeLoe(malwareSearchRequest.getEndDate())
                )
                .orderBy(malware.createdTime.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        Long totalCount = query
                .select(malware.count())
                .from(malware)
                .innerJoin(member)
                .on(malware.createdBy.eq(member.id))
                .where(
                        usernameLike(malwareSearchRequest.getUsername()),
                        nicknameLike(malwareSearchRequest.getNickname()),
                        titleLike(malwareSearchRequest.getTitle()),
                        risknessEq(RisknessType.toEnumType(malwareSearchRequest.getRiskness())),
                        detectedTimeGoe(malwareSearchRequest.getStartDate()),
                        detectedTimeLoe(malwareSearchRequest.getEndDate())
                )
                .fetchOne();
        return new PageImpl<>(findedList, pageable, totalCount);
    }

    private BooleanExpression usernameLike(String username) {
        return hasText(username) ? member.username.like("%"+username+"%") : null;
    }

    private BooleanExpression nicknameLike(String nickname) {
        return hasText(nickname) ? malware.nickname.like("%"+nickname+"%") : null;
    }

    private BooleanExpression titleLike(String title) {
        return hasText(title) ? malware.title.like("%"+title+"%") : null;
    }

    private BooleanExpression risknessEq(RisknessType riskness) {
        return riskness != null ? malware.riskness.eq(riskness) : null;
    }

    private BooleanExpression detectedTimeGoe(LocalDate detectedTime) {
        return detectedTime != null ? malware.detectedTime.goe(detectedTime.atTime(LocalTime.MIN)) : null;
    }

    private BooleanExpression detectedTimeLoe(LocalDate detectedTime) {
        return detectedTime != null ? malware.detectedTime.loe(detectedTime.atTime(LocalTime.MAX)) : null;
    }

    public Page<MalwareInMalwareFilePage> findByMalwareFileId(Long malwareFileId, Pageable pageable) {
        List<MalwareInMalwareFilePage> findedList = query
                .select(Projections.constructor(MalwareInMalwareFilePage.class, malware, malwareMalwarefile.filename))
                .from(malware)
                .innerJoin(member)
                .on(malware.createdBy.eq(member.id))
                .innerJoin(malwareMalwarefile)
                .on(malware.id.eq(malwareMalwarefile.malware.id))
                .where(malwareMalwarefile.malwarefile.id.eq(malwareFileId))
                .orderBy(malware.createdTime.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        Long totalCount = query
                .select(malware.count())
                .from(malware)
                .innerJoin(malwareMalwarefile)
                .on(malware.id.eq(malwareMalwarefile.malware.id))
                .where(malwareMalwarefile.malwarefile.id.eq(malwareFileId))
                .fetchOne();

        return new PageImpl<>(findedList, pageable, totalCount);
    }
}
