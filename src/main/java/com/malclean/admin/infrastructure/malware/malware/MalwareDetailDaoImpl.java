package com.malclean.admin.infrastructure.malware.malware;

import com.malclean.admin.application.malware.malware.responsedto.MalwareDetailResponse;
import com.malclean.admin.domain.assignment.assignment.MalwareAssignment;
import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.malware.malware.MalwareDetailDao;
import com.malclean.admin.domain.malware.malware.MalwareMalwarefile;
import com.querydsl.core.Tuple;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import java.util.List;
import java.util.Optional;

import static com.malclean.admin.domain.malware.malware.QMalware.malware;
import static com.malclean.admin.domain.malware.malware.QMalwareMalwarefile.malwareMalwarefile;
import static com.malclean.admin.domain.malware.malwarefile.QMalwarefile.malwarefile;
import static com.malclean.admin.domain.member.QMember.member;
import static com.malclean.admin.domain.assignment.assignment.QMalwareAssignment.malwareAssignment;

@Slf4j
@Repository
public class MalwareDetailDaoImpl implements MalwareDetailDao {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public MalwareDetailDaoImpl(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    public Optional<MalwareDetailResponse> findDetail(Long malwareId) {

        Tuple result = query
                .select(malware, member.username, member.id)
                .from(malware)
                .innerJoin(member)
                .on(malware.createdBy.eq(member.id))
                .where(malware.id.eq(malwareId))
                .fetchOne();

        if (result == null)
            return Optional.empty();

        Malware findedMalware = result.get(malware);
        String username = result.get(member.username);
        Long id = result.get(member.id);

        List<MalwareMalwarefile> findedMapList = query
                .selectFrom(malwareMalwarefile)
                .leftJoin(malwareMalwarefile.malwarefile, malwarefile).fetchJoin()
                .where(malwareMalwarefile.malware.id.eq(malwareId))
                .fetch();

        List<MalwareAssignment> findedList = query
                .selectFrom(malwareAssignment)
                .where(malwareAssignment.malware.id.eq(malwareId))
                .fetch();

        MalwareDetailResponse malwareDetailResponse = new MalwareDetailResponse(findedMalware, findedMapList, findedList, username, id);

        return Optional.ofNullable(malwareDetailResponse);
    }
}
