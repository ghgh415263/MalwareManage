package com.malclean.admin.infrastructure.member;

import com.malclean.admin.dao.member.MemberInPage;
import com.malclean.admin.dao.member.MemberListDao;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.impl.JPAQueryFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import javax.persistence.EntityManager;

import java.util.List;

import static com.malclean.admin.domain.member.QMember.member;

@Repository
public class MemberListDaoImpl implements MemberListDao {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public MemberListDaoImpl(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    @Override
    public Page<MemberInPage> findbySearch(String name, String department, Pageable pageable) {
        List<MemberInPage> memberDtos = query.select(Projections.constructor(MemberInPage.class, member.id, member.username, member.authority, member.department))
                .from(member)
                .where(createSearchCondition(name, department))
                .orderBy(member.createdTime.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        Long totalCount = query
                .select(member.count())
                .from(member)
                .where(createSearchCondition(name, department))
                .fetchOne();

        return new PageImpl<>(memberDtos, pageable, totalCount);
    }

    private static BooleanBuilder createSearchCondition(String name, String department) {
        BooleanBuilder builder = new BooleanBuilder();
        if (StringUtils.hasText(name)) {
            builder.and(member.username.like("%"+name+"%"));
        }
        if (StringUtils.hasText(department)) {
            builder.and(member.username.like("%"+department+"%"));
        }
        return builder;
    }
}
