package com.malclean.admin.infrastructure.member;

import com.malclean.admin.dao.member.MemberInPage;
import com.malclean.admin.dao.member.MemberListDao;
import com.malclean.admin.domain.member.DepartmentType;
import com.querydsl.core.types.Projections;
import com.querydsl.core.types.dsl.BooleanExpression;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;

import java.util.List;

import static com.malclean.admin.domain.member.QMember.member;
import static org.springframework.util.StringUtils.hasText;

@Repository
@RequiredArgsConstructor
public class MemberListDaoImpl implements MemberListDao {

    private final JPAQueryFactory query;

    @Override
    public Page<MemberInPage> findbySearch(String username, String department, Pageable pageable) {
        List<MemberInPage> memberDtos = query
                .select(
                        Projections.constructor(
                                MemberInPage.class,
                                member.id,
                                member.username,
                                member.authority,
                                member.department)
                )
                .from(member)
                .where(
                        usernameLike(username),
                        departmentEq(DepartmentType.toEnumType(department))
                )
                .orderBy(member.id.asc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        Long totalCount = query
                .select(member.count())
                .from(member)
                .where(
                        usernameLike(username),
                        departmentEq(DepartmentType.toEnumType(department))
                )
                .fetchOne();

        return new PageImpl<>(memberDtos, pageable, totalCount);
    }

    private BooleanExpression usernameLike(String username) {
        return hasText(username) ? member.username.like("%"+username+"%") : null;
    }

    private BooleanExpression departmentEq(DepartmentType departmentType) {
        return departmentType != null ? member.department.eq(departmentType) : null;
    }
}
