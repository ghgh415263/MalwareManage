package com.malclean.admin.infrastructure.announcement;

import com.malclean.admin.domain.announcement.Announcement;
import com.malclean.admin.domain.announcement.requestdto.AnnouncementSearchRequest;
import com.malclean.admin.domain.announcement.enums.AnnouncementStatusType;
import com.malclean.admin.domain.announcement.responsedto.AnnouncementDetailResponse;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import javax.persistence.EntityManager;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

import static com.malclean.admin.domain.announcement.QAnnouncement.announcement;
import static com.malclean.admin.domain.member.QMember.member;


@Slf4j
@Repository
public class DslAnnouncementRepository {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public DslAnnouncementRepository(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    public Optional<AnnouncementDetailResponse> findByIdWithMember(Long id){
        return Optional.ofNullable(query
                        .select(Projections.constructor(AnnouncementDetailResponse.class, announcement, member.username, member.id))
                        .from(announcement)
                        .innerJoin(member)
                        .on(announcement.createdBy.eq(member.id))
                        .where(announcement.announcementId.eq(id))
                        .fetchOne()
        );
    }

    public List<Announcement> findAll(AnnouncementSearchRequest searchRequest, Pageable pageable){

        BooleanBuilder builder = createSearchCondition(searchRequest);

        return query
                .selectFrom(announcement)
                .innerJoin(member)
                .on(announcement.createdBy.eq(member.id))
                .where(builder)
                .orderBy(announcement.createdTime.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();
    }


    public Long countBySearch(AnnouncementSearchRequest searchRequest) {

        BooleanBuilder builder = createSearchCondition(searchRequest);

        return query
                .select(announcement.count())
                .from(announcement)
                .innerJoin(member)
                .on(announcement.createdBy.eq(member.id))
                .where(builder)
                .fetchOne();
    }

    private BooleanBuilder createSearchCondition(AnnouncementSearchRequest searchRequest) {
        String username = searchRequest.getPosterUsername();
        String title = searchRequest.getTitle();
        AnnouncementStatusType announcementStatus = AnnouncementStatusType.toEnumType(searchRequest.getAnnouncementStatus());
        LocalDate startDate = searchRequest.getStartDate();
        LocalDate endDate = searchRequest.getEndDate();

        BooleanBuilder builder = new BooleanBuilder();
        if (StringUtils.hasText(username)) {
            builder.and(member.username.like("%"+username+"%"));
        }

        if (StringUtils.hasText(title)) {
            builder.and(announcement.title.like("%"+title+"%"));
        }

        if (announcementStatus != null) {
            builder.and(announcement.announcementStatus.eq(announcementStatus));
        }

        if (startDate != null) {
            LocalDateTime startDateTime = startDate.atStartOfDay();
            builder.and(announcement.createdTime.after(startDateTime));
        }

        if (endDate != null) {
            LocalDateTime endDateTime = endDate.atTime(LocalTime.MAX);
            builder.and(announcement.createdTime.before(endDateTime));
        }
        return builder;
    }
}
