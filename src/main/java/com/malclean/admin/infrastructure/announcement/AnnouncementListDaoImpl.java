package com.malclean.admin.infrastructure.announcement;

import com.malclean.admin.dao.announcement.AnnouncementListDao;
import com.malclean.admin.dao.announcement.requestdto.AnnouncementSearchReq;
import com.malclean.admin.domain.announcement.enums.AnnouncementStatusType;
import com.malclean.admin.dao.announcement.responsedto.AnnouncementInPage;
import com.querydsl.core.types.Projections;
import com.querydsl.core.types.dsl.BooleanExpression;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;

import static com.malclean.admin.domain.announcement.QAnnouncement.announcement;
import static com.malclean.admin.domain.member.QMember.member;
import static org.springframework.util.StringUtils.hasText;


@Slf4j
@Repository
public class AnnouncementListDaoImpl implements AnnouncementListDao {

    private final JPAQueryFactory query;

    public AnnouncementListDaoImpl(JPAQueryFactory jpaQueryFactory){
        this.query = jpaQueryFactory;
    }

    public Page<AnnouncementInPage> findBySearch(AnnouncementSearchReq searchRequest, Pageable pageable){

        List<AnnouncementInPage> findedList = query
                .select(
                        Projections.constructor(
                                AnnouncementInPage.class,
                                announcement.announcementId,
                                announcement.title,
                                announcement.announcementStatus,
                                announcement.createdTime,
                                member.username
                        )
                )
                .from(announcement)
                .leftJoin(member)
                .on(announcement.createdBy.eq(member.id))
                .where(
                        usernameLike(searchRequest.getPosterUsername()),
                        titleLike(searchRequest.getTitle()),
                        announcementStatusEq(AnnouncementStatusType.toEnumType(searchRequest.getAnnouncementStatus())),
                        createdTimeGoe(searchRequest.getStartDate()),
                        createdTimeLoe(searchRequest.getEndDate())
                )
                .orderBy(announcement.announcementId.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

        Long totalCount = query
                .select(announcement.count())
                .from(announcement)
                .leftJoin(member)
                .on(announcement.createdBy.eq(member.id))
                .where(
                        usernameLike(searchRequest.getPosterUsername()),
                        titleLike(searchRequest.getTitle()),
                        announcementStatusEq(AnnouncementStatusType.toEnumType(searchRequest.getAnnouncementStatus())),
                        createdTimeGoe(searchRequest.getStartDate()),
                        createdTimeLoe(searchRequest.getEndDate())
                )
                .fetchOne();

        return new PageImpl<>(findedList, pageable, totalCount);
    }

    private BooleanExpression usernameLike(String username) {
        return hasText(username) ? member.username.like("%"+username+"%") : null;
    }


    private BooleanExpression titleLike(String title) {
        return hasText(title) ? announcement.title.like("%"+title+"%") : null;
    }

    private BooleanExpression announcementStatusEq(AnnouncementStatusType announcementStatusType) {
        return announcementStatusType != null ? announcement.announcementStatus.eq(announcementStatusType) : null;
    }

    private BooleanExpression createdTimeGoe(LocalDate startDate) {
        return startDate != null ? announcement.createdTime.goe(startDate.atTime(LocalTime.MIN)) : null;
    }

    private BooleanExpression createdTimeLoe(LocalDate endDate) {
        return endDate != null ? announcement.createdTime.loe(endDate.atTime(LocalTime.MAX)) : null;
    }

}
