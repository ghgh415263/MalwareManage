package com.malclean.admin;

import com.malclean.admin.ui.common.exception.InValidBindingException;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.stream.Collectors;

@Slf4j
@RestControllerAdvice
public class GlobalRestApiExceptionHandler {

    @ExceptionHandler
    protected RestApiErrorRes handleException(RestApiException ex, HttpServletRequest request, HttpServletResponse response) {
        response.setStatus(ex.getStatus().value());
        return new RestApiErrorRes(ex.getType(), ex.getTitle(), ex.getDetail(), request.getRequestURI(), ex.getStatus().value());
    }

    @Getter
    @AllArgsConstructor
    static class RestApiErrorRes{
        private final String type;
        private final String title;
        private final String detail;
        private final String instance;
        private final Integer status;
    }

    @ExceptionHandler
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    protected RestApiParameterErrorRes handleBingException(InValidBindingException ex, HttpServletRequest request){

        List<ParameterError> errors = ex.getBindingResult().getAllErrors().stream().map(error -> {
                    FieldError field = (FieldError) error;
                    return new ParameterError(field.getField(), field.getDefaultMessage(), field.getRejectedValue().toString());
                })
                .collect(Collectors.toList());

        log.warn("Request: {} {}{} < {}", request.getMethod(), request.getRequestURI(), errors, request.getRemoteHost());

        return new RestApiParameterErrorRes(ex.getType(), ex.getTitle(), ex.getDetail(), request.getRequestURI(), ex.getStatus().value(), errors);
    }

    @Getter
    static class RestApiParameterErrorRes{
        private final String type;
        private final String title;
        private final String detail;
        private final String instance;
        private final Integer status;
        private final List<ParameterError> bingErrors;

        public RestApiParameterErrorRes(String type, String title, String detail, String instance, Integer status, List<ParameterError> bingErrors) {
            this.type = type;
            this.title = title;
            this.detail = detail;
            this.instance = instance;
            this.status = status;
            this.bingErrors = bingErrors;
        }
    }

    @Getter
    @AllArgsConstructor
    @ToString
    static class ParameterError{
        private String name;
        private String message;
        private String rejectedValue;

    }
}
