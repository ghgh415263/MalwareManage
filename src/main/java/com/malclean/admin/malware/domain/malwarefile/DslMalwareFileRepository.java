package com.malclean.admin.malware.domain.malwarefile;

import com.malclean.admin.malware.domain.MalwareFile;

import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import javax.persistence.EntityManager;
import java.util.List;

import static com.malclean.admin.malware.domain.QMalwareFile.malwareFile;
import static com.malclean.admin.malware.domain.QMalwareMalwareFileMap.malwareMalwareFileMap;

@Slf4j
@Repository
public class DslMalwareFileRepository {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public DslMalwareFileRepository(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    public List<MalwareFile> findAll(MalwareFileSearchRequest searchRequest, Pageable pageable) {

        BooleanBuilder builder = createSearchCondition(searchRequest);

        return query
                .select(malwareFile).distinct()
                .from(malwareMalwareFileMap)
                .innerJoin(malwareMalwareFileMap.malwareFile, malwareFile)
                .where(builder)
                .orderBy(malwareFile.createdTime.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();
    }

    public Long countBySearch(MalwareFileSearchRequest searchRequest) {

        BooleanBuilder builder = createSearchCondition(searchRequest);

        return query
                .select(malwareFile.count()).distinct()
                .from(malwareMalwareFileMap)
                .join(malwareMalwareFileMap.malwareFile, malwareFile)
                .where(builder)
                .fetchOne();
    }

    private static BooleanBuilder createSearchCondition(MalwareFileSearchRequest searchRequest) {
        String signature = searchRequest.getSignature();
        String filename = searchRequest.getFilename();

        BooleanBuilder builder = new BooleanBuilder();

        if (StringUtils.hasText(signature)) {
            builder.and(malwareFile.signature.eq(signature));
        }

        if (StringUtils.hasText(filename)) {
            builder.and(malwareMalwareFileMap.filename.like("%"+filename+"%"));
        }

        return builder;
    }
}
