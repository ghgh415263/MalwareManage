package com.malclean.admin.malware.application.malwareassignment;

import com.malclean.admin.malware.domain.AssignmentAttachment;
import com.malclean.admin.malware.domain.MalwareAssignment;
import com.malclean.admin.member.domain.Member;
import com.malclean.admin.malware.domain.Malware;
import com.malclean.admin.malware.domain.assignmentattachment.AssignmentAttachmentRepository;
import com.malclean.admin.malware.domain.malware.MalwareRepository;
import com.malclean.admin.malware.domain.malwareassignment.MalwareAssignmentRepository;
import com.malclean.admin.member.domain.member.MemberRepository;
import com.malclean.admin.malware.infrastructure.store.LocalStoreManager;
import com.malclean.admin.malware.infrastructure.store.LocalStorePath;
import com.malclean.admin.malware.infrastructure.store.StoreManager;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.persistence.EntityNotFoundException;
import java.util.List;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareAssignmentSaveService {

    private final MalwareRepository malwareRepository;

    private final MalwareAssignmentRepository malwareAssignmentRepository;

    private final MemberRepository memberRepository;

    private final AssignmentAttachmentRepository assignmentAttachmentRepository;

    private final StoreManager localStoreManager = new LocalStoreManager(LocalStorePath.malwareAssignmentAttatchmentDir);

    @Transactional
    public Long saveMalwareAssignment(Long malwareId, MalwareAssignmentSaveRequest malwareAssignmentSaveRequest, String sessionUsername){
        Member sessionMember = memberRepository.findByUsername(sessionUsername)
                .orElseThrow(() -> new EntityNotFoundException());

        Member assignee = memberRepository.findById(malwareAssignmentSaveRequest.getAssigneeId())
                .orElseThrow(() -> new EntityNotFoundException());

        Malware Malware = malwareRepository.findById(malwareId)
                .orElseThrow(() -> new EntityNotFoundException());

        MalwareAssignment malwareAssignment = MalwareAssignment.builder()
                .assigner(sessionMember)
                .assignee(assignee)
                .malware(Malware)
                .title(malwareAssignmentSaveRequest.getTitle())
                .content(malwareAssignmentSaveRequest.getContent())
                .assignmentStatus(malwareAssignmentSaveRequest.getAssignmentStatusType())
                .estimatedTime(malwareAssignmentSaveRequest.getEstimatedTime())
                .build();
        MalwareAssignment savedMalwareAssignment = malwareAssignmentRepository.save(malwareAssignment);

        saveMultipartFileList(malwareAssignmentSaveRequest.getMultipartFileList(), sessionMember, malwareAssignment);

        return savedMalwareAssignment.getId();
    }

    private void saveMultipartFileList(List<MultipartFile> multipartFileList, Member sessionMember, MalwareAssignment malwareAssignment) {
        multipartFileList.stream()
                .forEach(multipartFile -> {
                    String storeFilename = localStoreManager.save(multipartFile);
                    AssignmentAttachment assignmentAttachment = AssignmentAttachment.builder()
                            .malwareAssignment(malwareAssignment)
                            .uploader(sessionMember)
                            .filename(multipartFile.getOriginalFilename())
                            .storeFilename(storeFilename)
                            .build();
                    assignmentAttachmentRepository.save(assignmentAttachment);
                });
    }
}
