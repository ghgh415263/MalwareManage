package com.malclean.admin.ui.malware.malware;

import com.malclean.admin.application.malware.malware.requestdto.MalwareSaveRequest;
import com.malclean.admin.application.malware.malware.MalwareSaveService;
import com.malclean.admin.common.enummapper.EnumMapper;
import com.malclean.admin.domain.malware.malwarefile.DuplicateFileUploadException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.SessionAttribute;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


@RequiredArgsConstructor
@Slf4j
@Controller
public class MalwareSaveController {

    private final MalwareSaveService malwareSaveService;

    private final EnumMapper enumMapper;

    @GetMapping("/malwares/create")
    public String MalwareSaveForm(@ModelAttribute MalwareSaveRequest malwareSaveRequest, Model model) {
        setEnumTypes(model);
        return "malwarePostForm";
    }

    @PostMapping("/malwares/create")
    public String MalwareSave(@ModelAttribute @Validated MalwareSaveRequest malwareSaveRequest, BindingResult bindingResult,
                              @SessionAttribute(name = "loginMemberId") Long loginMemberId,
                              Model model,
                              RedirectAttributes redirectAttributes) {

        if (CollectionUtils.isEmpty(malwareSaveRequest.getMultipartFileList()))
            bindingResult.rejectValue("multipartFileList", null, "빈 파일이 아닌 파일을 첨부하십시요");

        if (malwareSaveRequest.getResolvedTime() != null && malwareSaveRequest.getDetectedTime().isAfter(malwareSaveRequest.getResolvedTime())) {
            bindingResult.rejectValue("detectedTime", null, "탐지시간과 해결시간을 확인해주세요.");
            bindingResult.rejectValue("resolvedTime", null, "탐지시간과 해결시간을 확인해주세요.");
        }

        if (bindingResult.hasErrors()) {
            setEnumTypes(model);
            return "malwarePostForm";
        }

        try {
            Long malwareId = malwareSaveService.saveMalware(malwareSaveRequest, loginMemberId);
            redirectAttributes.addAttribute("id", malwareId);
            return "redirect:/malwares/{id}";
        }
        catch (DuplicateFileUploadException e) {
            bindingResult.rejectValue("multipartFileList", null, e.getMessage());
            setEnumTypes(model);
            return "malwarePostForm";
        }
    }

    private void setEnumTypes(Model model){
        model.addAttribute("RisknessType", enumMapper.get("RisknessType"));
        model.addAttribute("PurposeType", enumMapper.get("PurposeType"));
        model.addAttribute("BehaviorType", enumMapper.get("BehaviorType"));
    }

}
