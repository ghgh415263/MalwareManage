package com.malclean.admin.ui.malware.malware;

import com.malclean.admin.application.malware.malware.requestdto.MalwareEditReq;
import com.malclean.admin.application.malware.malware.MalwareEditService;
import com.malclean.admin.common.enummapper.EnumMapper;
import com.malclean.admin.dao.malware.malware.MalwareEditDetailDao;
import com.malclean.admin.domain.malware.malware.MalwareEditDetailRes;
import com.malclean.admin.ui.common.exception.EntityPageNotFoundException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

@RequiredArgsConstructor
@Slf4j
@Controller
public class MalwareEditController {

    private final MalwareEditDetailDao malwareEditDetailDao;

    private final MalwareEditService malwareEditService;

    private final EnumMapper enumMapper;

    @GetMapping("malwares/{malwareId}/edit")
    public String malwareEditForm(@PathVariable Long malwareId,
                                  @SessionAttribute(name = "loginMemberId") Long loginMemberId,
                                  Model model) {

        MalwareEditDetailRes malwareEditDetailRes = malwareEditDetailDao.findDetail(malwareId)
                .orElseThrow(EntityPageNotFoundException::new);

        model.addAttribute("malwareDetailRes", malwareEditDetailRes);
        model.addAttribute("RisknessType", enumMapper.get("RisknessType"));
        model.addAttribute("PurposeType", enumMapper.get("PurposeType"));
        model.addAttribute("BehaviorType", enumMapper.get("BehaviorType"));

        return "malwareEditForm";
    }

    @PostMapping("malwares/{malwareId}/edit")
    public String malwareEdit(@PathVariable Long malwareId,
                              @ModelAttribute MalwareEditReq malwareEditReq, BindingResult bindingResult, Model model,
                              @SessionAttribute(name = "loginMemberId") Long loginMemberId) {

        if (malwareEditReq.getResolvedTime() != null && malwareEditReq.getDetectedTime().isAfter(malwareEditReq.getResolvedTime())) {
            bindingResult.rejectValue("detectedTime", null, "탐지시간과 해결시간을 확인해주세요.");
            bindingResult.rejectValue("resolvedTime", null, "탐지시간과 해결시간을 확인해주세요.");
        }

        if (bindingResult.hasErrors()) {
            model.addAttribute("RisknessType", enumMapper.get("RisknessType"));
            model.addAttribute("PurposeType", enumMapper.get("PurposeType"));
            model.addAttribute("BehaviorType", enumMapper.get("BehaviorType"));
            return "malwareEditForm";
        }

        malwareEditService.editMalware(malwareId, malwareEditReq, loginMemberId);

        return "redirect:/malwares/{malwareId}";
    }
}
