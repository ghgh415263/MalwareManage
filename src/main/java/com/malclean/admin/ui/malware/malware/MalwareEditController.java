package com.malclean.admin.ui.malware.malware;

import com.malclean.admin.application.malware.malware.responsedto.MalwareDetailResponse;
import com.malclean.admin.application.malware.malware.requestdto.MalwareEditRequest;
import com.malclean.admin.application.malware.malware.MalwareEditService;
import com.malclean.admin.common.enummapper.EnumMapper;
import com.malclean.admin.dao.malware.malware.MalwareDetailDao;
import com.malclean.admin.ui.common.exception.EntityPageNotFoundException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.CollectionUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

@RequiredArgsConstructor
@Slf4j
@Controller
public class MalwareEditController {

    private final MalwareDetailDao malwareDetailDao;

    private final MalwareEditService malwareEditService;

    private final EnumMapper enumMapper;

    @GetMapping("malwares/{malwareId}/edit")
    public String malwareEditForm(@PathVariable Long malwareId,
                                  @SessionAttribute(name = "loginMemberId", required = false) Long loginMemberId,
                                  Model model) {
        MalwareDetailResponse malwareDetailResponse = malwareDetailDao.findDetail(malwareId)
                .orElseThrow(EntityPageNotFoundException::new);
        model.addAttribute("malwareDetailResponse", malwareDetailResponse);
        model.addAttribute("RisknessType", enumMapper.getAsList("RisknessType"));
        model.addAttribute("PurposeType", enumMapper.getAsList("PurposeType"));
        model.addAttribute("BehaviorType", enumMapper.getAsList("BehaviorType"));
        return "malwareEditForm";
    }

    @PostMapping("malwares/{malwareId}/edit")
    public String malwareEdit(@PathVariable Long malwareId,
                              @ModelAttribute MalwareEditRequest malwareEditRequest, BindingResult bindingResult, Model model,
                              @SessionAttribute(name = "loginMemberId", required = false) Long loginMemberId) {

        if (CollectionUtils.isEmpty(malwareEditRequest.getMultipartFileList()) && false)
            bindingResult.rejectValue("multipartFileList", null, "빈 파일이 아닌 파일을 첨부하십시요");

        if (malwareEditRequest.getResolvedTime() != null && malwareEditRequest.getDetectedTime().isAfter(malwareEditRequest.getResolvedTime())) {
            bindingResult.rejectValue("detectedTime", null, "탐지시간과 해결시간을 확인해주세요.");
            bindingResult.rejectValue("resolvedTime", null, "탐지시간과 해결시간을 확인해주세요.");
        }

        if (bindingResult.hasErrors()) {
            model.addAttribute("RisknessType", enumMapper.getAsList("RisknessType"));
            model.addAttribute("PurposeType", enumMapper.getAsList("PurposeType"));
            model.addAttribute("BehaviorType", enumMapper.getAsList("BehaviorType"));
            return "malwareEditForm";
        }

        malwareEditService.editMalware(malwareId, malwareEditRequest, loginMemberId);
        return "redirect:/malwares/{malwareId}";
    }
}
