package com.malclean.admin.ui.member;

import com.malclean.admin.application.member.requestdto.MemberSaveRequest;
import com.malclean.admin.common.enums.EnumMapper;
import com.malclean.admin.application.member.MemberSaveService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.SessionAttribute;

@RequiredArgsConstructor
@Slf4j
@Controller
public class JoinController {

    private String specialCharactersString = "!@#$%&*()'+,-./:;<=>?[]^_`{|}";

    private final MemberSaveService memberSaveService;

    private final EnumMapper enumMapper;

    @GetMapping("/members/create")
    public String joinPage(@ModelAttribute MemberSaveRequest memberSaveRequest,
                           @SessionAttribute(name = "loginMemberId", required = false) Long loginMemberId,
                           Model model) {
        model.addAttribute("AuthorityType", enumMapper.getAsList("AuthorityType"));
        return "joinForm";
    }

    @PostMapping("/members/create")
    public String join(@ModelAttribute @Validated MemberSaveRequest memberSaveRequest,
                       BindingResult bindingResult,
                       @SessionAttribute(name = "loginMemberId", required = false) Long loginMemberId,
                       Model model) {

        if (!hasNumber(memberSaveRequest.getPassword()))
            bindingResult.rejectValue("password",null, "적어도 하나 이상의 숫자를 포함해주세요.");

        if (!hasSpecialCharacter(memberSaveRequest.getPassword()))
            bindingResult.rejectValue("password",null, "적어도 하나 이상의 특수문자를 포함해주세요.");

        if (bindingResult.hasErrors()) {
            model.addAttribute("AuthorityType", enumMapper.getAsList("AuthorityType"));
            return "joinForm";
        }

        memberSaveService.saveMember(memberSaveRequest, loginMemberId);

        return "joinComplete";
    }

    private boolean hasNumber(String password) {
        for (char c : password.toCharArray()) {
            if(Character.isDigit(c)) {
                return true;
            }
        }
        return false;
    }

    private boolean hasSpecialCharacter(String password) {
        for (char c : password.toCharArray()) {
            if(specialCharactersString.contains(Character.toString(c))) {
                return true;
            }
        }
        return false;
    }

}
