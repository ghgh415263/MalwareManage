package com.malclean.admin.ui.member;

import com.malclean.admin.common.PasswordEncoder;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.member.AuthorityType;
import com.malclean.admin.application.member.MemberSaveService;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;

@RequiredArgsConstructor
@Slf4j
@Controller
public class JoinController {

    private final MemberSaveService memberSaveService;

    private final PasswordEncoder passwordEncoder;

    @GetMapping("/members/create")
    public String joinPage(@ModelAttribute MemberSaveRequest memberSaveRequest) {
        return "joinForm";
    }

    @PostMapping("/members/create")
    public String join(@ModelAttribute @Validated MemberSaveRequest memberSaveRequest, BindingResult bindingResult) {

        if (bindingResult.hasErrors()) {
            return "joinForm";
        }

        String encodedPassword = passwordEncoder.encode(memberSaveRequest.getPassword());

        Member newMember = Member.builder()
                .username(memberSaveRequest.getUsername())
                .password(encodedPassword)
                .authority(memberSaveRequest.getAuthority()) /*todo 다중 어똘리티*/
                .employeeId(memberSaveRequest.getEmployeeId())
                .build();

        memberSaveService.saveMember(newMember);

        return "joinComplete";
    }


    @NoArgsConstructor
    @Getter
    public static class MemberSaveRequest {

        @NotBlank
        private String username;

        @NotBlank
        private String password;

        @NotNull
        private Long employeeId;

        @NotNull
        private AuthorityType authority;

        public MemberSaveRequest(String username, String password, Long employeeId, String authority) {
            this.username = username;
            this.password = password;
            this.employeeId = employeeId;
            this.authority = AuthorityType.toEnumType(authority);
        }
    }
}
