package com.malclean.admin.repository.announcement;

import com.malclean.admin.entity.Announcement;
import com.malclean.admin.entity.QAnnouncement;
import com.malclean.admin.entity.QAssignmentComment;
import com.malclean.admin.entity.QMember;
import com.malclean.admin.entity.malware.QMalware;
import com.malclean.admin.enumtype.AnnouncementStatusType;
import com.malclean.admin.enumtype.RisknessType;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import javax.persistence.EntityManager;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;

@Slf4j
@Repository
public class DslAnnouncementRepository {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public DslAnnouncementRepository(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    public List<Announcement> findAll(AnnouncementSearchRequest searchRequest, Pageable pageable){

        BooleanBuilder builder = createSearchBuilder(searchRequest);

        return query
                .selectFrom(QAnnouncement.announcement)
                .innerJoin(QAnnouncement.announcement.poster, QMember.member).fetchJoin()
                .where(builder)
                .orderBy(QAnnouncement.announcement.createdTime.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();
    }


    public Long countBySearch(AnnouncementSearchRequest searchRequest) {

        BooleanBuilder builder = createSearchBuilder(searchRequest);

        return query
                .select(QAnnouncement.announcement.count())
                .from(QAnnouncement.announcement)
                .innerJoin(QAnnouncement.announcement.poster, QMember.member)
                .where(builder)
                .fetchOne();
    }

    private static BooleanBuilder createSearchBuilder(AnnouncementSearchRequest searchRequest) {
        String username = searchRequest.getPosterUsername();
        String title = searchRequest.getTitle();
        AnnouncementStatusType announcementStatus = searchRequest.getAnnouncementStatus();
        LocalDate startDate = searchRequest.getStartDate();
        LocalDate endDate = searchRequest.getEndDate();

        BooleanBuilder builder = new BooleanBuilder();
        if (StringUtils.hasText(username)) {
            builder.and(QMember.member.username.like("%"+username+"%"));
        }

        if (StringUtils.hasText(title)) {
            builder.and(QAnnouncement.announcement.title.like("%"+title+"%"));
        }

        if (announcementStatus != null) {
            builder.and(QAnnouncement.announcement.announcementStatus.eq(announcementStatus));
        }

        if (startDate != null) {
            LocalDateTime startDateTime = startDate.atStartOfDay();
            builder.and(QAnnouncement.announcement.createdTime.after(startDateTime));
        }

        if (endDate != null) {
            LocalDateTime endDateTime = endDate.atTime(LocalTime.MAX);
            builder.and(QAnnouncement.announcement.createdTime.before(endDateTime));
        }
        return builder;
    }
}
