package com.malclean.admin.repository.malware;

import com.malclean.admin.entity.malware.Malware;
import com.malclean.admin.enumtype.RisknessType;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import javax.persistence.EntityManager;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;

import static com.malclean.admin.entity.QMember.member;
import static com.malclean.admin.entity.malware.QMalware.malware;


@Slf4j
@Repository
public class DslMalwareRepository {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public DslMalwareRepository(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    public List<Malware> findAll(MalwareSearchRequest malwareSearchRequest, Pageable pageable) {

        BooleanBuilder builder = createSearchCondition(malwareSearchRequest);

        return query
                .selectFrom(malware)
                .join(malware.poster, member)
                .where(builder)
                .orderBy(malware.createdTime.desc())
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();
    }

    public Long countBySearchCondition(MalwareSearchRequest malwareSearchRequest) {

        BooleanBuilder builder = createSearchCondition(malwareSearchRequest);

        return query
                .select(malware.count())
                .from(malware)
                .join(malware.poster, member)
                .where(builder)
                .fetchOne();
    }

    private static BooleanBuilder createSearchCondition(MalwareSearchRequest malwareSearchRequest) {
        String username = malwareSearchRequest.getUsername();
        String nickname = malwareSearchRequest.getNickname();
        String title = malwareSearchRequest.getTitle();
        RisknessType riskness = RisknessType.toEnumType(malwareSearchRequest.getRiskness());

        LocalDate startDate = malwareSearchRequest.getStartDate();
        LocalDate endDate = malwareSearchRequest.getEndDate();

        BooleanBuilder builder = new BooleanBuilder();
        if (StringUtils.hasText(username)) {
            builder.and(member.username.like("%"+username+"%"));
        }

        if (StringUtils.hasText(nickname)) {
            builder.and(malware.nickname.like("%"+nickname+"%"));
        }

        if (StringUtils.hasText(title)) {
            builder.and(malware.title.like("%"+title+"%"));
        }

        if (riskness != null) {
            builder.and(malware.riskness.eq(riskness));
        }

        if (startDate != null) {
            LocalDateTime startDateTime = startDate.atStartOfDay();
            builder.and(malware.detectedTime.after(startDateTime));
        }

        if (endDate != null) {
            LocalDateTime endDateTime = endDate.atTime(LocalTime.MAX);
            builder.and(malware.detectedTime.before(endDateTime));
        }
        return builder;
    }
}
