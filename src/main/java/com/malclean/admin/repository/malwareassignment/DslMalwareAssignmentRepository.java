package com.malclean.admin.repository.malwareassignment;

import com.malclean.admin.entity.*;
import com.malclean.admin.entity.malware.QMalware;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import java.util.List;

@Slf4j
@Repository
public class DslMalwareAssignmentRepository {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public DslMalwareAssignmentRepository(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    public MalwareAssignment findByIdWithMembersAndMalware(Long id) {
        return query
                .select(QMalwareAssignment.malwareAssignment)
                .from(QMalwareAssignment.malwareAssignment)
                .innerJoin(QMalwareAssignment.malwareAssignment.malware, QMalware.malware).fetchJoin()
                .innerJoin(QMalwareAssignment.malwareAssignment.assigner, QMember.member).fetchJoin()
                .innerJoin(QMalwareAssignment.malwareAssignment.assignee, QMember.member).fetchJoin()
                .where(QMalwareAssignment.malwareAssignment.id.eq(id))
                .fetchFirst();
    }

    public List<MalwareAssignment> findAllByMemberId(Long memberId, Long lastAssignmentId, Integer pageSize){
        BooleanBuilder dynamicLtId = new BooleanBuilder();

        if (lastAssignmentId != null) {
            dynamicLtId.and(QMalwareAssignment.malwareAssignment.id.lt(lastAssignmentId));
        }

        return query
                .selectFrom(QMalwareAssignment.malwareAssignment)
                .innerJoin(QMalwareAssignment.malwareAssignment.assignee, QMember.member).fetchJoin()
                .where(QMalwareAssignment.malwareAssignment.assignee.id.eq(memberId), dynamicLtId)
                .orderBy(QMalwareAssignment.malwareAssignment.id.desc())
                .limit(pageSize)
                .fetch();
    }

}
