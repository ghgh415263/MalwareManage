package com.malclean.admin.repository.malwareassignment;

import com.malclean.admin.entity.MalwareAssignment;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import java.util.List;
import java.util.Optional;

import static com.malclean.admin.entity.QMalwareAssignment.malwareAssignment;
import static com.malclean.admin.entity.QMember.member;
import static com.malclean.admin.entity.malware.QMalware.malware;

@Slf4j
@Repository
public class DslMalwareAssignmentRepository {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public DslMalwareAssignmentRepository(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    public Optional<MalwareAssignment> findByIdWithMembersAndMalware(Long id) {
        return Optional.ofNullable(query
                .select(malwareAssignment)
                .from(malwareAssignment)
                .innerJoin(malwareAssignment.malware, malware).fetchJoin()
                .innerJoin(malwareAssignment.assigner, member).fetchJoin()
                .innerJoin(malwareAssignment.assignee, member).fetchJoin()
                .where(malwareAssignment.id.eq(id))
                .fetchOne());
    }

    public List<MalwareAssignment> findByAssignerAndAssignee(Long myId, Long lastAssignmentId, Integer pageSize) {

        BooleanBuilder dynamicLtId = new BooleanBuilder();
        if (lastAssignmentId != null) {
            dynamicLtId.and(malwareAssignment.id.lt(lastAssignmentId));
        }
        dynamicLtId.and(malwareAssignment.assignee.id.eq(myId));
        dynamicLtId.or(malwareAssignment.assigner.id.eq(myId));


        return query
                .selectFrom(malwareAssignment)
                .where(dynamicLtId)
                .orderBy(malwareAssignment.id.desc())
                .limit(pageSize)
                .fetch();
    }

}
