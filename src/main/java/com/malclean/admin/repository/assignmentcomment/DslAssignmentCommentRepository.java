package com.malclean.admin.repository.assignmentcomment;

import com.malclean.admin.entity.AssignmentComment;
import com.malclean.admin.entity.QAssignmentComment;
import com.malclean.admin.entity.QMember;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import java.util.List;
import java.util.Optional;

@Slf4j
@Repository
public class DslAssignmentCommentRepository {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public DslAssignmentCommentRepository(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    public List<AssignmentComment> findAll(Long assignmentId, Long lastCommentId, Integer pageSize){
        BooleanBuilder dynamicLtId = new BooleanBuilder();

        if (lastCommentId != null) {
            dynamicLtId.and(QAssignmentComment.assignmentComment.id.lt(lastCommentId));
        }

        return query
                .selectFrom(QAssignmentComment.assignmentComment)
                .innerJoin(QAssignmentComment.assignmentComment.writer, QMember.member).fetchJoin()
                .where(QAssignmentComment.assignmentComment.malwareAssignment.id.eq(assignmentId), dynamicLtId)
                .orderBy(QAssignmentComment.assignmentComment.id.desc())
                .limit(pageSize)
                .fetch();
    }

    public Optional<AssignmentComment> findByIdWithMember(Long id) {

        return Optional.ofNullable(
                query
                .selectFrom(QAssignmentComment.assignmentComment)
                .innerJoin(QAssignmentComment.assignmentComment.writer, QMember.member).fetchJoin()
                .where(QAssignmentComment.assignmentComment.id.eq(id))
                .fetchOne()
        );
    }
}
