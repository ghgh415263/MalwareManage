package com.malclean.admin.controller.malwarefile;

import com.malclean.admin.entity.Malware;
import com.malclean.admin.entity.MalwareFile;
import com.malclean.admin.entity.MalwareMalwareFileMap;
import com.malclean.admin.service.malwarefile.MalwareFileDetailService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import java.util.List;
import java.util.stream.Collectors;

@RequiredArgsConstructor
@Slf4j
@Controller
public class MalwareFileDetailController {

    private final MalwareFileDetailService malwareFileDetailService;

    @GetMapping("/malwarefile/{id}")
    public String malwareFileDetail(@PathVariable Long id, Model model) {
        List<MalwareMalwareFileMap> malwareMalwareFileMapList = malwareFileDetailService.findMalwareFile(id);

        if (malwareMalwareFileMapList.isEmpty()) {
            throw new RuntimeException();
        }

        List<MalwareInFileDetailDto> malwareInFileDetailDtoList = malwareMalwareFileMapList.stream()
                .map(malwareMalwareFileMap -> {
                            Malware malware = malwareMalwareFileMap.getMalware();
                            return MalwareInFileDetailDto.builder()
                                    .id(malware.getId())
                                    .title(malware.getTitle())
                                    .nickname(malware.getNickname())
                                    .riskness(malware.getRiskness().getTitle())
                                    .detectedTime(malware.getDetectedTime())
                                    .resolvedTime(malware.getResolvedTime())
                                    .build();
                        }
                )
                .collect(Collectors.toList());

        MalwareFile malwareFile = malwareMalwareFileMapList.get(0).getMalwareFile();
        MalwareFileDetailDto malwareFileDetailDto = new MalwareFileDetailDto(malwareFile, malwareInFileDetailDtoList);

        model.addAttribute("malwareFileDetailDto", malwareFileDetailDto);
        return "malwareFileDetail";
    }

}
