package com.malclean.admin.controller.malwarefile;

import com.malclean.admin.controller.pagination.CustomPage;
import com.malclean.admin.entity.MalwareMalwareFileMap;
import com.malclean.admin.entity.malware.Malware;
import com.malclean.admin.service.malwarefile.MalwareFileDetailService;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import java.util.List;

@RequiredArgsConstructor
@Slf4j
@Controller
public class MalwareFileDetailController {

    private final MalwareFileDetailService malwareFileDetailService;

    @GetMapping("/malwarefiles/{id}")
    public String malwareFileDetail(@PathVariable Long id, @PageableDefault(size=1, sort="createdTime",direction = Sort.Direction.DESC) Pageable pageable, Model model) {
        Page<MalwareMalwareFileMap> malwareMalwareFileMapPage = malwareFileDetailService.findMalwareFile(id, pageable);

        MalwareFileDetailRespnse malwareFileDetailRespnse = new MalwareFileDetailRespnse(malwareMalwareFileMapPage);

        model.addAttribute("malwareFileDetailRespnse", malwareFileDetailRespnse);
        return "malwareFileDetail";
    }

    @Getter
    public static class MalwareFileDetailRespnse {

        private Long id;

        private String signature;

        private String filename;

        private CustomPage<MalwareInPage> malwarePage;

        public MalwareFileDetailRespnse(Page<MalwareMalwareFileMap> malwareMalwareFileMapPage) {

            MalwareMalwareFileMap firstMalwareMalwareFileMap = malwareMalwareFileMapPage.stream().findFirst()
                    .orElseThrow();

            id = firstMalwareMalwareFileMap.getMalwareFile().getId();
            signature = firstMalwareMalwareFileMap.getMalwareFile().getSignature();
            filename = firstMalwareMalwareFileMap.getFilename();

            List<MalwareInPage> malwareInPageList = malwareMalwareFileMapPage
                    .map(malwareMalwareFileMap -> {
                        return new MalwareInPage(malwareMalwareFileMap);
                    })
                    .toList();

            malwarePage = new CustomPage<>(malwareInPageList, malwareMalwareFileMapPage.getPageable(), malwareMalwareFileMapPage.getTotalElements());
        }
    }

}
