package com.malclean.admin.common.aop;

import com.malclean.admin.domain.announcement.exceptions.NoAuthorityException;
import com.malclean.admin.domain.member.AuthorityType;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.member.MemberRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;

@Slf4j
@Component
@Aspect
@RequiredArgsConstructor
public class AuthAop {

    private final MemberRepository memberRepository;

    @Before("@annotation(Authorized)")
    public void execute(Authorized Authorized){

        HttpServletRequest request =
                ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();

        Long loginMemberId = (Long) request.getSession().getAttribute("loginMemberId");
        Member member = memberRepository.findById(loginMemberId)
                .orElseThrow();

        AuthorityType authority = Authorized.authority();

        if (!member.hasAuthority(authority)){
            throw new NoAuthorityException();
        }
    }
}
