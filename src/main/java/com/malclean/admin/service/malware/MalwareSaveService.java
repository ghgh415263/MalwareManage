package com.malclean.admin.service.malware;

import com.malclean.admin.controller.malware.MalwareSaveDto;
import com.malclean.admin.entity.*;
import com.malclean.admin.repository.MalwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareSaveService {

    private final MalwareRepository malwareRepository;

    @Transactional
    public Malware saveMalware(MalwareSaveDto malwareSaveDto, Member loginMember) {


        Malware malware = Malware.builder()
                .poster(loginMember)
                .title(malwareSaveDto.getTitle())
                .content(malwareSaveDto.getContent())
                .nickname(malwareSaveDto.getNickname())
                .riskness(malwareSaveDto.getRiskness())
                .detectedTime(malwareSaveDto.getDetectedTime())
                .resolvedTime(malwareSaveDto.getResolvedTime())
                .build();


        List<String> purposeList = malwareSaveDto.getPurposeList();

        if ( !CollectionUtils.isEmpty(purposeList) ) {
            purposeList.stream()
                    .forEach(purpose -> {

                        MalwarePurpose malwarePurpose = MalwarePurpose.builder()
                                .malware(malware)
                                .purposeType(purpose)
                                .build();

                        malware.addPurpose(malwarePurpose);
                    });
        }


        List<String> behaviorList = malwareSaveDto.getBehaviorList();

        if ( !CollectionUtils.isEmpty(behaviorList) ) {
            behaviorList.stream()
                    .forEach(behavior -> {

                        MalwareBehavior malwareBehavior = MalwareBehavior.builder()
                                .malware(malware)
                                .behaviorType(behavior)
                                .build();

                        malware.addBehavior(malwareBehavior);
                    });
        }


        List<MultipartFile> multipartFileList = malwareSaveDto.getMultipartFileList();

        if ( !CollectionUtils.isEmpty(multipartFileList) ) {
            multipartFileList.stream()
                    .forEach(multipartFile -> {

                        MalwareFile malwareFile = MalwareFile.builder()
                                .uploader(loginMember)
                                .malware(malware)
                                .signature("")
                                .storeFilename("")
                                .filename("")
                                .build();

                        malware.addMalwareFile(malwareFile);
            });
        }

        malwareRepository.save(malware);
        return malware;
    }
}
