package com.malclean.admin.service.malware;

import com.malclean.admin.entity.*;
import com.malclean.admin.entity.malware.Malware;
import com.malclean.admin.enumtype.RisknessType;
import com.malclean.admin.repository.MalwareMalwareFileMap.MalwareMalwareFileMapRepository;
import com.malclean.admin.repository.malware.MalwareRepository;
import com.malclean.admin.repository.malwarefile.MalwareFileRepository;
import com.malclean.admin.repository.member.MemberRepository;
import com.malclean.admin.service.malware.malwarebehavior.MalwareBehaviorListService;
import com.malclean.admin.service.malware.malwarepurpose.MalwarePurposeListService;
import com.malclean.admin.service.malwarefile.MalwareFileSaveService;
import com.malclean.admin.store.LocalStorePath;
import com.malclean.admin.signature.SignatureUtils;
import com.malclean.admin.store.LocalStoreManager;
import com.malclean.admin.store.StoreManager;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareSaveService {

    private final MalwareRepository malwareRepository;

    private final MalwarePurposeListService malwarePurposeListService;

    private final MalwareBehaviorListService malwareBehaviorListService;

    private final MalwareFileSaveService malwareFileSaveService;

    private final MemberRepository memberRepository;


    @Transactional
    public Long saveMalware(MalwareSaveRequest malwareSaveRequest, String sessionUsername) {

        Member sessionMember = memberRepository.findByUsername(sessionUsername)
                .orElseThrow();

        Malware malware = Malware.builder()
                .poster(sessionMember)
                .title(malwareSaveRequest.getTitle())
                .content(malwareSaveRequest.getContent())
                .nickname(malwareSaveRequest.getNickname())
                .riskness(RisknessType.toEnumType(malwareSaveRequest.getRiskness()))
                .detectedTime(malwareSaveRequest.getDetectedTime())
                .resolvedTime(malwareSaveRequest.getResolvedTime())
                .build();

        malwareRepository.save(malware);

        malwarePurposeListService.saveMalwarePurposeList(malware, malwareSaveRequest.getPurposeList());

        malwareBehaviorListService.saveMalwareBehaviorList(malware, malwareSaveRequest.getBehaviorList());

        malwareFileSaveService.saveMalwareFileList(malware, sessionMember, malwareSaveRequest.getMultipartFileList());

        return malware.getId();
    }
}
