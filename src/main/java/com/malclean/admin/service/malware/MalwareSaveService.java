package com.malclean.admin.service.malware;

import com.malclean.admin.controller.malware.MalwareSaveDto;
import com.malclean.admin.entity.*;
import com.malclean.admin.enumtype.BehaviorType;
import com.malclean.admin.enumtype.PurposeType;
import com.malclean.admin.enumtype.RisknessType;
import com.malclean.admin.repository.MalwareBehaviorRepository;
import com.malclean.admin.repository.MalwareFileRepository;
import com.malclean.admin.repository.MalwarePurposeRepository;
import com.malclean.admin.repository.MalwareRepository;
import com.malclean.admin.signature.SignatureUtils;
import com.malclean.admin.store.StoreManager;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareSaveService {

    private final MalwareRepository malwareRepository;

    private final MalwarePurposeRepository malwarePurposeRepository;

    private final MalwareBehaviorRepository malwareBehaviorRepository;

    private final MalwareFileRepository malwareFileRepository;

    private final StoreManager malwareFileLocalStore;

    @Transactional
    public Malware saveMalware(MalwareSaveDto malwareSaveDto, Member sessionMember) {


        Malware malware = Malware.builder()
                .poster(sessionMember)
                .title(malwareSaveDto.getTitle())
                .content(malwareSaveDto.getContent())
                .nickname(malwareSaveDto.getNickname())
                .riskness(RisknessType.toEnumType(malwareSaveDto.getRiskness()))
                .detectedTime(malwareSaveDto.getDetectedTime())
                .resolvedTime(malwareSaveDto.getResolvedTime())
                .build();
        malwareRepository.save(malware);


        List<String> purposeList = malwareSaveDto.getPurposeList();
        for(String purpose : purposeList){
            MalwarePurpose malwarePurpose = MalwarePurpose.builder()
                    .malware(malware)
                    .purposeType(PurposeType.toEnumType(purpose))
                    .build();
            malwarePurposeRepository.save(malwarePurpose);
        }


        List<String> behaviorList = malwareSaveDto.getBehaviorList();
        for(String behavior : behaviorList){
            MalwareBehavior malwareBehavior = MalwareBehavior.builder()
                    .malware(malware)
                    .behaviorType(BehaviorType.toEnumType(behavior))
                    .build();
            malwareBehaviorRepository.save(malwareBehavior);
        }


        List<MultipartFile> multipartFileList = malwareSaveDto.getMultipartFileList();
        for(MultipartFile file : multipartFileList){
            String storeFilename = malwareFileLocalStore.save(file);
            String fileSignature = new SignatureUtils().createSignature(file); //싱글턴으로 사용시 Not Thread Safe

            MalwareFile malwareFile = MalwareFile.builder()
                    .uploader(sessionMember)
                    .malware(malware)
                    .signature(fileSignature)
                    .storeFilename(storeFilename)
                    .filename(file.getOriginalFilename())
                    .build();
            malwareFileRepository.save(malwareFile);
        }

        return malware;
    }
}
