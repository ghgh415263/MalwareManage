package com.malclean.admin.service.malware;

import com.malclean.admin.entity.MalwareFile;
import com.malclean.admin.entity.MalwareMalwareFileMap;
import com.malclean.admin.entity.Member;
import com.malclean.admin.entity.malware.Malware;
import com.malclean.admin.entity.malware.MalwareBehavior;
import com.malclean.admin.entity.malware.MalwarePurpose;
import com.malclean.admin.enumtype.BehaviorType;
import com.malclean.admin.enumtype.PurposeType;
import com.malclean.admin.repository.MalwareMalwareFileMapRepository;
import com.malclean.admin.repository.malware.MalwareBehaviorRepository;
import com.malclean.admin.repository.malware.MalwarePurposeRepository;
import com.malclean.admin.repository.malware.MalwareRepository;
import com.malclean.admin.repository.malwarefile.MalwareFileRepository;
import com.malclean.admin.repository.member.MemberRepository;
import com.malclean.admin.store.LocalStorePath;
import com.malclean.admin.signature.SignatureUtils;
import com.malclean.admin.store.LocalStoreManager;
import com.malclean.admin.store.StoreManager;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareEditService {

    private final MalwareRepository malwareRepository;

    private final MalwareFileRepository malwareFileRepository;

    private final MemberRepository memberRepository;

    private final MalwarePurposeRepository malwarePurposeRepository;

    private final MalwareBehaviorRepository malwareBehaviorRepository;

    private final MalwareMalwareFileMapRepository malwareMalwareFileMapRepository;
    private final StoreManager localStoreManager = new LocalStoreManager(LocalStorePath.malwarefileDir);


    @Transactional
    public void editMalware(Long malwareId, MalwareEditDto malwareEditDto, String sessionUsername) {
        Malware malware = malwareRepository.findById(malwareId)
                .orElseThrow();
        Member sessionMember = memberRepository.findByUsername(sessionUsername)
                .orElseThrow();
        List<MalwarePurpose> malwarePurposeList = malwarePurposeRepository.findAllByMalwareId(malwareId);
        List<MalwareBehavior> malwareBehaviorList = malwareBehaviorRepository.findAllByMalwareId(malwareId);
        malwarePurposeList.stream().forEach(malwarePurpose -> malwarePurposeRepository.delete(malwarePurpose));
        malwareBehaviorList.stream().forEach(malwareBehavior -> malwareBehaviorRepository.delete(malwareBehavior));
        for(Long deletedFileId : malwareEditDto.getDeletedIdList()) {
            malwareMalwareFileMapRepository.deleteByMalwareIdAndMalwareFileId(malwareId ,deletedFileId);
        }

        malware.editTitle(malwareEditDto.getTitle());
        malware.editContent(malwareEditDto.getContent());
        malware.editNickname(malwareEditDto.getNickname());
        malware.editRisknessType(malwareEditDto.getRiskness());
        malware.editDetectedTime(malwareEditDto.getDetectedTime());
        malware.editResolvedTime(malwareEditDto.getResolvedTime());

        for(PurposeType purpose : malwareEditDto.getPurposeList()){
            MalwarePurpose malwarePurpose = new MalwarePurpose(malware, purpose);
            malwarePurposeRepository.save(malwarePurpose);
        }

        for(BehaviorType behavior : malwareEditDto.getBehaviorList()){
            MalwareBehavior malwareBehavior = new MalwareBehavior(malware, behavior);
            malwareBehaviorRepository.save(malwareBehavior);
        }

        for(MultipartFile file : malwareEditDto.getMultipartFileList()) {
            String fileSignature = new SignatureUtils().createSignature(file); //싱글턴으로 사용시 Not Thread Safe

            MalwareFile findedMalwareFile = malwareFileRepository.findBySignature(fileSignature)
                    .orElseGet(() -> {
                                String storeFilename = localStoreManager.save(file);
                                MalwareFile malwareFile = MalwareFile.builder()
                                        .uploader(sessionMember)
                                        .signature(fileSignature)
                                        .storeFilename(storeFilename)
                                        .filename(file.getOriginalFilename())
                                        .build();
                                malwareFileRepository.save(malwareFile);
                                return malwareFile;
                            }
                    );

            MalwareMalwareFileMap map = MalwareMalwareFileMap.builder()
                    .malware(malware)
                    .malwareFile(findedMalwareFile)
                    .filename(file.getOriginalFilename())
                    .build();
            malwareMalwareFileMapRepository.save(map);
        }
    }
}
