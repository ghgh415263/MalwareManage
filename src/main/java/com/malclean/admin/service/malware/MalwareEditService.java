package com.malclean.admin.service.malware;

import com.malclean.admin.entity.malware.Malware;
import com.malclean.admin.entity.malware.MalwareBehavior;
import com.malclean.admin.entity.malware.MalwarePurpose;
import com.malclean.admin.enumtype.BehaviorType;
import com.malclean.admin.enumtype.PurposeType;
import com.malclean.admin.repository.malware.MalwareBehaviorRepository;
import com.malclean.admin.repository.malware.MalwarePurposeRepository;
import com.malclean.admin.repository.malware.MalwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.stream.Collectors;

@RequiredArgsConstructor
@Slf4j
@Service
public class MalwareEditService {

    private final MalwareRepository malwareRepository;

    private final MalwarePurposeRepository malwarePurposeRepository;

    private final MalwareBehaviorRepository malwareBehaviorRepository;

    @Transactional
    public void editMalware(Long malwareId, MalwareEditDto malwareEditDto) {
        Malware malware = malwareRepository.findById(malwareId)
                .orElseThrow();
        List<MalwarePurpose> malwarePurposeList = malwarePurposeRepository.findAllByMalwareId(malwareId);
        List<MalwareBehavior> malwareBehaviorList = malwareBehaviorRepository.findAllByMalwareId(malwareId);
        malwarePurposeList.stream().forEach(malwarePurpose -> malwarePurposeRepository.delete(malwarePurpose));
        malwareBehaviorList.stream().forEach(malwareBehavior -> malwareBehaviorRepository.delete(malwareBehavior));


        malware.editTitle(malwareEditDto.getTitle());
        malware.editContent(malwareEditDto.getContent());
        malware.editNickname(malwareEditDto.getNickname());
        malware.editDetectedTime(malwareEditDto.getDetectedTime());
        malware.editResolvedTime(malwareEditDto.getResolvedTime());
        List<PurposeType> purposeList = malwareEditDto.getPurposeList();
        for(PurposeType purpose : purposeList){
            MalwarePurpose malwarePurpose = new MalwarePurpose(malware, purpose);
            malwarePurposeRepository.save(malwarePurpose);
        }

        List<BehaviorType> behaviorList = malwareEditDto.getBehaviorList();
        for(BehaviorType behavior : behaviorList){
            MalwareBehavior malwareBehavior = new MalwareBehavior(malware, behavior);
            malwareBehaviorRepository.save(malwareBehavior);
        }
    }
}
