package com.malclean.admin.service.member;

import com.malclean.admin.entity.Member;
import com.malclean.admin.enumtype.AuthorityType;
import com.malclean.admin.repository.member.MemberRepository;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityNotFoundException;

@RequiredArgsConstructor
@Slf4j
@Service
public class MemberDetailService {

    private final MemberRepository memberRepository;

    @Transactional(readOnly = true)
    public MemberPageResponse findMember(Long wantedMemberId, String sessionUsername) {

        Member wantedMember = memberRepository.findById(wantedMemberId)
                .orElseThrow(()->new EntityNotFoundException());

        //todo 개인정보를 받아오는 서버가 생기면 바꿔야함11

        if (wantedMember.getUsername() != sessionUsername) {
            return MemberPageResponse.createOtherMemberPage(wantedMember);
        }

        return MemberPageResponse.createMyMemberPage(wantedMember);
    }

    @Getter
    public static class MemberPageResponse {

        private String username;

        private AuthorityType authority;

        private MemberPageResponse(String username, AuthorityType authority) {
            this.username = username;
            this.authority = authority;
        }

        public static MemberPageResponse createMyMemberPage(Member member){
            return new MemberPageResponse(member.getUsername(), member.getAuthority());
        }

        public static MemberPageResponse createOtherMemberPage(Member member){
            return new MemberPageResponse(member.getUsername(), member.getAuthority());
        }
    }

}
