package com.malclean.admin.domain.malware.malwaremalwarefilemap;

import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import java.util.List;
import java.util.Optional;

import static com.malclean.admin.domain.malware.malware.QMalware.malware;
import static com.malclean.admin.domain.malware.malwarefile.QMalwareFile.malwareFile;
import static com.malclean.admin.domain.malware.malwaremalwarefilemap.QMalwareMalwareFileMap.malwareMalwareFileMap;

@Slf4j
@Repository
public class DslMalwareMalwareFileMapRepository {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public DslMalwareMalwareFileMapRepository(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    public List<MalwareMalwareFileMap> findAllByMalwareFileId(Long malwareFileId, Pageable pageable) {

        return query
                .selectFrom(malwareMalwareFileMap)
                .leftJoin(malwareMalwareFileMap.malwareFile, malwareFile).fetchJoin()
                .leftJoin(malwareMalwareFileMap.malware, malware).fetchJoin()
                .where(malwareMalwareFileMap.malwareFile.id.eq(malwareFileId))
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();

    }

    public List<MalwareMalwareFileMap> findAllByMalwareId(Long malwareId, Pageable pageable) {

        return query
                .selectFrom(malwareMalwareFileMap)
                .leftJoin(malwareMalwareFileMap.malwareFile, malwareFile).fetchJoin()
                .leftJoin(malwareMalwareFileMap.malware, malware).fetchJoin()
                .where(malwareMalwareFileMap.malware.id.eq(malwareId))
                .offset(pageable.getOffset())
                .limit(pageable.getPageSize())
                .fetch();
    }

    public List<MalwareMalwareFileMap> findAllByMalwareId(Long malwareId) {

        return query
                .selectFrom(malwareMalwareFileMap)
                .from(malwareMalwareFileMap)
                .leftJoin(malwareMalwareFileMap.malwareFile, malwareFile).fetchJoin()
                .leftJoin(malwareMalwareFileMap.malware, malware).fetchJoin()
                .where(malwareMalwareFileMap.malware.id.eq(malwareId))
                .fetch();

    }

    public Optional<MalwareMalwareFileMap> findByMalwareIdAndMalwareFileId(Long malwareId, Long malwareFileId){
        return Optional.ofNullable(query
                .selectFrom(malwareMalwareFileMap)
                .from(malwareMalwareFileMap)
                .leftJoin(malwareMalwareFileMap.malware, malware).fetchJoin()
                .leftJoin(malwareMalwareFileMap.malwareFile, malwareFile).fetchJoin()
                .where(malwareMalwareFileMap.malware.id.eq(malwareId))
                .where(malwareMalwareFileMap.malwareFile.id.eq(malwareFileId))
                .fetchOne());
    }
}
