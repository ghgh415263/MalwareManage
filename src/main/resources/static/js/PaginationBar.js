export class PaginationBar {

    #wapper
    constructor(wapper) {
        // fields
        this.#wapper = wapper;
    }

    renderPaginationBar(pageable) {

        if(pageable.totalPages === 0)
            return

        let $ul = document.createElement('ul');
        $ul.classList.add('pagination','justify-content-center')

        // 3. 첫/이전 페이지 버튼 추가
        if (pageable.hasPrevious) {
            $ul.appendChild(this.#makePreviousButton(pageable.page-1))
        }

        // 4. 페이지 번호 추가
        for (let i = 1; i <= pageable.totalPages; i++) {
            $ul.appendChild(this.#makePageButton(i))
        }

        // 5. 다음/끝 페이지 버튼 추가
        if (pageable.hasNext) {
            $ul.appendChild(this.#makeNextButton(pageable.page+1))
        }

        const currentPage = Array.from($ul.querySelectorAll('a')).find(a => (Number(a.text) === pageable.page));
        currentPage.classList.add('disabled')

        this.#wapper.replaceChildren($ul)
    }

    #makePreviousButton(page) {

        let $li = document.createElement('li');
        $li.setAttribute('class','page-item');

        $li.insertAdjacentHTML("beforeend", `
        <a href="javascript:void(0);" id="prev" class="page-link" data-page="${page}">
            이전
        </a>`
        );

        return $li
    }

    #makePageButton(page){

        let $li = document.createElement('li');
        $li.setAttribute('class','page-item');

        $li.insertAdjacentHTML("beforeend", `
        <a class="page-link" href="javascript:void(0);" data-page="${page}">${page}</a>`
        );

        return $li
    }

    #makeNextButton(page) {
        let $li = document.createElement('li');
        $li.setAttribute('class','page-item');

        $li.insertAdjacentHTML("beforeend", `
        <a href="javascript:void(0);" id="next" class="page-link" data-page="${page}">
            다음
        </a>`
        );

        return $li
    }
}