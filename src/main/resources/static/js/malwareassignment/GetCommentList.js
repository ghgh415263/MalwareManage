import { pagnationPage } from '../pagnationPage.js';
export const getNextCommentList = () => {

    const assignmentId = window.location.pathname.split("/").at(-1);
    let url = '/assignments/' + assignmentId + '/comments';

    let options = {
        method: 'Get',
        mode: 'cors',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'text/html; charset=UTF-8'
        },
    }

    fetch(url, options)
        .then((response) => {
            if (response.ok) {
                return response.json()
            }
        })
        .then(result => {
            for (const comment of result.content){
                const $li = makeCommentTag(comment)
                $('.list-group').append($li);
            }
            makeDrawPage(result.customPageable)
        })
        .then(() => {
            pagnationPage();
        })

}

const makeCommentTag = (comment) => {
    const $li = document.createElement('li');
    $li.setAttribute('class','list-group-item');
    $li.setAttribute('data-id',comment.id);

    const $strong = document.createElement('strong');
    $strong.innerText = comment.writerUsername;

    const $div = document.createElement('div');
    $div.innerText = comment.content;

    const $deleteButton = document.createElement('button');
    $deleteButton.setAttribute('class', 'comment-delete-btn');
    $deleteButton.innerText = "삭제";

    const $updateFormButton = document.createElement('button');
    $updateFormButton.setAttribute('class', 'comment-patchForm-btn');
    $updateFormButton.innerText = "수정";

    $li.append($strong, $div, $deleteButton, $updateFormButton);

    return $li;
}

const makeDrawPage = (customPageable) => {

    // 페이지네이션 HTML을 제거한 후 로직 종료
    if ( customPageable.totalPages < 2 ) {
        document.querySelector('.paging').innerHTML = '';
    }

    let html = '<ul class="pagination justify-content-center">';

    // 3. 첫/이전 페이지 버튼 추가
    if (customPageable.hasPrevious) {
        html += `
                <li class="page-item">
                    <a href="javascript:void(0);" id="prev" class="page-link" data-page="${customPageable.page-1}">
                        <span>이전</span>
                    </a>
                </li>
            `;
    }

    // 4. 페이지 번호 추가
    for (let i = 1; i <= customPageable.totalPages; i++) {
        html += `
                <li class="page-item">
                    <a class="page-link" href="javascript:void(0);" data-page="${i}">${i}</a>
                </li>`
    }

    // 5. 다음/끝 페이지 버튼 추가
    if (customPageable.hasNext) {
        html += `
                <li class="page-item">
                    <a href="javascript:void(0);" id="next" class="page-link" data-page="${customPageable.page+1}">
                        <span>다음</span>
                    </a>
                </li>
            `;
    }

    html += `</ul>`

    const paging = document.querySelector('.paging');
    paging.innerHTML = html;

    // 7. 사용자가 클릭한 페이지 번호(page) 또는 끝 페이지 번호(totalPageCount)에 해당되는 a 태그를 찾아 활성화(active) 처리한 후 클릭 이벤트 제거
    const currentPage = Array.from(paging.querySelectorAll('a')).find(a => (Number(a.text) === customPageable.page));
    currentPage.classList.add('disabled')
}