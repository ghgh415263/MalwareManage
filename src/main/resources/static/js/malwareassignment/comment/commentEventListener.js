import { getCommentList } from './GetCommentList.js';
import { PageableList } from "./makeCommentTag.js"
import { PaginationBar } from "../../PaginationBar.js";
import {deleteComment} from "./DeleteComment.js";
import {postComment} from "./PostComment.js";

window.onload = async () => {
    const customPage = await getCommentList(1)

    const $listWapper = document.querySelector('.list-group');
    const $paginationBarWapper = document.querySelector('.paging');

    const pageableList = new PageableList($listWapper, new CommentTagFactory());
    pageableList.renderList(customPage.content);
    const paginationBar = new PaginationBar($paginationBarWapper);
    paginationBar.renderPaginationBar(customPage.customPageable)

    $paginationBarWapper.addEventListener('click', async (e) => {

        const page = e.target.dataset.page;
        if (!page) {
            return;
        }

        const pageable = await getCommentList(page);
        paginationBar.renderPaginationBar(pageable.customPageable);
        pageableList.renderList(pageable.content);
    });

    $listWapper.addEventListener('click', async (e) => {

        const commentId = e.target.parentNode.dataset.id
        await deleteComment(commentId);

        const pageable = await getCommentList(1);
        paginationBar.renderPaginationBar(pageable.customPageable);
        pageableList.renderList(pageable.content);
    })

    const $commentSubmitButton = document.getElementById("comment-submit-btn");
    $commentSubmitButton.addEventListener('click', async (e) => {

        const commentContent = document.getElementById("comment-content").value;

        await postComment(commentContent);

        const pageable = await getCommentList(1);
        paginationBar.renderPaginationBar(pageable.customPageable);
        pageableList.renderList(pageable.content);
    })
}

class CommentTagFactory{
    createTag(comment) {
        const $li = document.createElement('li');
        $li.setAttribute('class','list-group-item');
        $li.setAttribute('data-id', comment.id);

        $li.insertAdjacentHTML("beforeend", `
        <strong>${comment.writerUsername}</strong>
        <div>${comment.content}</div>`
        );

        if (comment.isMine) {
            $li.insertAdjacentHTML("beforeend", `
            <button class="comment-delete-btn">삭제</button>
            <button class="comment-patchForm-btn">수정</button>`
            );
        }
        return $li;
    }
}