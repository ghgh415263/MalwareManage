package com.malclean.admin.domain.malwareassignment;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@Slf4j
@SpringBootTest
@Transactional
public class DslMalwareAssignmentRepositoryTest {
/*
    @Autowired
    private DslMalwareAssignmentRepository dslMalwareAssignmentRepository;

    @Autowired
    private EntityManager em;

    @Test
    void findByAssignerAndAssignee_테스트() {
        Member member = Member.builder()
                .username("testMember1")
                .password("")
                .authority(AuthorityType.ADMIN)
                .employeeId(1L)
                .build();
        em.persist(member);

        Member member2 = Member.builder()
                .username("testMember2")
                .password("")
                .authority(AuthorityType.ADMIN)
                .employeeId(2L)
                .build();
        em.persist(member2);

        Malware malware = Malware.builder()
                .title("")
                .content("")
                .nickname("")
                .resolvedTime(LocalDateTime.now())
                .detectedTime(LocalDateTime.now())
                .poster(member)
                .riskness(RisknessType.LOW)
                .build();
        em.persist(malware);

        MalwareAssignment malwareAssignment = MalwareAssignment.builder()
                .malware(malware)
                .title("")
                .content("")
                .assignmentStatus(AssignmentStatusType.ASSIGNED)
                .assigner(member)
                .assignee(member2)
                .estimatedTime(LocalDateTime.now())
                .build();
        em.persist(malwareAssignment);

        MalwareAssignment malwareAssignment2 = MalwareAssignment.builder()
                .malware(malware)
                .title("")
                .content("")
                .assignmentStatus(AssignmentStatusType.ASSIGNED)
                .assigner(member2)
                .assignee(member)
                .estimatedTime(LocalDateTime.now())
                .build();
        em.persist(malwareAssignment2);

        List<MalwareAssignment> findedMalwareAssignmentList = dslMalwareAssignmentRepository.findByAssignerAndAssignee(member.getId(), null, 2);

        assertThat(findedMalwareAssignmentList.size()).isEqualTo(2);
        assertThat(findedMalwareAssignmentList.get(1).getAssigner().getId()).isEqualTo(member.getId());
        assertThat(findedMalwareAssignmentList.get(0).getAssigner().getId()).isEqualTo(member2.getId());
    }
*/
}
