package com.malclean.admin.domain.announcement;


import com.malclean.admin.TestAuditingConfig;
import com.malclean.admin.dao.announcement.AnnouncementDetailDao;
import com.malclean.admin.dao.announcement.responsedto.AnnouncementDetailRes;
import com.malclean.admin.domain.announcement.enums.AnnouncementStatusType;
import com.malclean.admin.domain.member.AuthorityType;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.infrastructure.announcement.AnnouncementDetailDaoImpl;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.context.annotation.Import;

import javax.persistence.EntityManager;

import java.util.Optional;
import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@Slf4j
@DataJpaTest
@Import(TestAuditingConfig.class)
public class AnnouncementDetailTest {

    @Autowired
    private TestEntityManager tem;

    private AnnouncementDetailDao announcementDetailDao;

    @BeforeEach
    public void beforeEach() {
        EntityManager em = tem.getEntityManager();
        announcementDetailDao = new AnnouncementDetailDaoImpl(new JPAQueryFactory(em));
    }

    @Test
    public void 상세없음() {
        Optional<AnnouncementDetailRes> response = announcementDetailDao.findDetail(1L);

        assertThat(response.isPresent()).isEqualTo(false);
    }

    @Test
    public void 상세있음() {
        Member member = Member.builder()
                .employeeId(1l)
                .username("testusername")
                .password("testpassword")
                .authority(AuthorityType.ADMIN)
                .build();
        tem.persist(member);
        
        Announcement savedAnnouncement = new Announcement("테스트제목","테스트내용", AnnouncementStatusType.IMPORTANT);
        tem.persist(savedAnnouncement);

        Optional<AnnouncementDetailRes> response = announcementDetailDao.findDetail(savedAnnouncement.getAnnouncementId());

        assertThat(response.isPresent()).isEqualTo(true);
    }

}
