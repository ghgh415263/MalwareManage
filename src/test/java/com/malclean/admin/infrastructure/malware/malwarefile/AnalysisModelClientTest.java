package com.malclean.admin.infrastructure.malware.malwarefile;

import com.malclean.admin.helper.TestApiErrorResponseFactory;
import com.malclean.admin.infrastructure.ApiErrorException;
import com.malclean.admin.domain.malware.malwarefile.service.AnalysisModelClient;
import com.malclean.admin.domain.malware.malwarefile.service.AnalysisModelListRes;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.web.reactive.function.client.WebClient;

import java.io.IOException;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;

public class AnalysisModelClientTest {

    private AnalysisModelClient analysisModelClient;

    private static MockWebServer mockWebServer;

    @BeforeEach
    public void beforeEach() {
        WebClient.Builder webClientBuilder = WebClient.builder().baseUrl(mockWebServer.url("/models").toString());
        analysisModelClient = new AnalysisModelClientImpl(webClientBuilder);
    }

    @BeforeAll
    static void setUp() throws IOException {
        mockWebServer = new MockWebServer();
        mockWebServer.start();
    }

    @AfterAll
    static void tearDown() throws IOException {
        mockWebServer.shutdown();
    }

    @Test
    public void 에러400() {

        String responseBody = TestApiErrorResponseFactory.create();

        mockWebServer.enqueue(new MockResponse()
                .setResponseCode(400)
                .setHeader("Content-Type", "application/json")
                .setBody(responseBody));

        assertThatThrownBy(() -> analysisModelClient.findAnalysisModelList())
                .isInstanceOf(ApiErrorException.class);
    }

    @Test
    public void 정상200() {

        String responseBody = "{ \"analysisModelList\" : [{\"id\": 1, \"name\": \"model1\"},{\"id\": 2, \"name\": \"model2\"}]}".trim();

        mockWebServer.enqueue(
                new MockResponse()
                        .setResponseCode(200)
                        .setHeader("Content-Type", "application/json")
                        .setBody(responseBody));

        AnalysisModelListRes response = analysisModelClient.findAnalysisModelList();

        assertThat(response.getAnalysisModelList().size())
                .isEqualTo(2);
    }
}
