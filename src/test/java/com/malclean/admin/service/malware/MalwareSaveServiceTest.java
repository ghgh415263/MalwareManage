package com.malclean.admin.service.malware;

import com.malclean.admin.application.malware.malware.requestdto.MalwareSaveRequest;
import com.malclean.admin.application.malware.malware.MalwareSaveService;
import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.member.AuthorityType;
import com.malclean.admin.domain.malware.malware.enums.BehaviorType;
import com.malclean.admin.domain.malware.malware.enums.PurposeType;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import javax.persistence.EntityManager;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@Slf4j
@SpringBootTest
@Transactional
public class MalwareSaveServiceTest {

    @Autowired
    private MalwareSaveService malwareSaveService;

    @Autowired
    private EntityManager em;

    @BeforeEach
    void 멤버저장() {
        Member member = Member.builder()
                .username("testMember")
                .password("")
                .authority(AuthorityType.ADMIN)
                .employeeId(1L)
                .build();

        em.persist(member);
    }
    @Test
    void 악성코드_저장_빈리스트3개() {

        Member member = em.find(Member.class, 1L);

        MalwareSaveRequest malwareSaveRequest = MalwareSaveRequest.builder()
                .title("testTitle")
                .content("")
                .nickname("")
                .riskness(RisknessType.LOW.getDescription())
                .multipartFileList(new ArrayList<>())
                .purposeList(new ArrayList<>())
                .behaviorList(new ArrayList<>())
                .detectedTime(LocalDateTime.now())
                .resolvedTime(LocalDateTime.now())
                .build();


        Long malwareId = malwareSaveService.saveMalware(malwareSaveRequest, member.getId());
        em.flush();
        em.clear();
        Malware findedMalware = em.find(Malware.class, 1L);


        assertThat(malwareId).isEqualTo(findedMalware.getId());
    }


    @Test
    void 악성코드_저장_리스트3개(){

        Member member = em.find(Member.class, 1L);

        List<String> purposeList = Arrays.asList(PurposeType.BOT.getDescription(), PurposeType.ADWARE.getDescription());
        List<String> behaviorList = Arrays.asList(BehaviorType.PUP.getDescription(), BehaviorType.WORM.getDescription());
        MockMultipartFile file = new MockMultipartFile("testfile","testfile.txt", null, "test1".getBytes());
        MockMultipartFile file2 = new MockMultipartFile("testfile2","testfile2.txt", null, "test2".getBytes());
        List<MultipartFile> fileList = Arrays.asList(file, file2);

        MalwareSaveRequest malwareSaveRequest = MalwareSaveRequest.builder()
                .title("testTitle")
                .content("")
                .nickname("")
                .riskness(RisknessType.LOW.getDescription())
                .multipartFileList(fileList)
                .purposeList(purposeList)
                .behaviorList(behaviorList)
                .detectedTime(LocalDateTime.now())
                .resolvedTime(LocalDateTime.now())
                .build();


        Long malwareId = malwareSaveService.saveMalware(malwareSaveRequest, member.getId());
        em.flush();
        em.clear();
        Malware findedMalware = em.find(Malware.class, malwareId);
        /*todo 모든 리스트들이 다 잘들어갔나 확인*/

        assertThat(malwareId).isEqualTo(findedMalware.getId());
    }
}
