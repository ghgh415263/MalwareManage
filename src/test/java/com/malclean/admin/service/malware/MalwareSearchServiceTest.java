package com.malclean.admin.service.malware;

import com.malclean.admin.repository.malware.MalwareSearchDto;
import com.malclean.admin.entity.malware.Malware;
import com.malclean.admin.entity.Member;
import com.malclean.admin.enumtype.AuthorityType;
import com.malclean.admin.enumtype.RisknessType;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.LocalDate;
import java.time.LocalDateTime;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@Slf4j
@SpringBootTest
@Transactional
public class MalwareSearchServiceTest {

    @Autowired
    private MalwareSearchService malwareSearchService;

    @Autowired
    private EntityManager em;

    @BeforeEach
    void 저장() {
        Member member = Member.builder()
                .username("testMember")
                .password("")
                .authority(AuthorityType.ADMIN)
                .employeeId(1L)
                .build();

        em.persist(member);

        for (int i = 0; i < 10; i++) {

            String title = "testTitle" + i;
            String nickname = "testNickname" + i;
            LocalDateTime resolvedTime = LocalDateTime.of(2023, 5, i+1, 1, 1);
            LocalDateTime detectedTime = LocalDateTime.of(2023, 5, i+1, 1, 1);

            Malware malware = Malware.builder()
                    .title(title)
                    .content("")
                    .nickname(nickname)
                    .resolvedTime(resolvedTime)
                    .detectedTime(detectedTime)
                    .poster(member)
                    .riskness(RisknessType.LOW)
                    .build();

            em.persist(malware);
        }
    }

    @Test
    void 아무조건도없는검색() {

        MalwareSearchDto malwareSearchDto = new MalwareSearchDto(null, null, null, null, null, null);
        Pageable pageable = PageRequest.of(0,10);

        Page<Malware> page = malwareSearchService.searchMalware(malwareSearchDto, pageable);

        assertThat(page.getTotalPages()).isEqualTo(1);
        assertThat(page.getTotalElements()).isEqualTo(10);

    }

    @Test
    void title검색_하나검색됨() {

        MalwareSearchDto malwareSearchDto = new MalwareSearchDto(null, null, "testTitle1", null, null, null);
        Pageable pageable = PageRequest.of(0,10);

        Page<Malware> page = malwareSearchService.searchMalware(malwareSearchDto, pageable);

        assertThat(page.getTotalPages()).isEqualTo(1);
        assertThat(page.getTotalElements()).isEqualTo(1);
        assertThat(page.getContent().get(0).getTitle()).isEqualTo("testTitle1");

    }

    @Test
    void nickname검색_하나검색됨() {

        MalwareSearchDto malwareSearchDto = new MalwareSearchDto(null, "testNickname3", null, null, null, null);
        Pageable pageable = PageRequest.of(0,10);

        Page<Malware> page = malwareSearchService.searchMalware(malwareSearchDto, pageable);

        assertThat(page.getTotalPages()).isEqualTo(1);
        assertThat(page.getTotalElements()).isEqualTo(1);
        assertThat(page.getContent().get(0).getNickname()).isEqualTo("testNickname3");

    }

    @Test
    void username검색_여러개검색됨() {

        MalwareSearchDto malwareSearchDto = new MalwareSearchDto("testMember", null, null, null, null, null);
        Pageable pageable = PageRequest.of(0,10);

        Page<Malware> page = malwareSearchService.searchMalware(malwareSearchDto, pageable);

        assertThat(page.getTotalPages()).isEqualTo(1);
        assertThat(page.getTotalElements()).isEqualTo(10);
        for (int i = 0; i < 10; i++) {
            assertThat(page.getContent().get(i).getPoster().getUsername()).isEqualTo("testMember");
        }
    }

    @Test
    void username검색_검색안됨() {

        MalwareSearchDto malwareSearchDto = new MalwareSearchDto("없는멤버이름", null, null, null, null, null);
        Pageable pageable = PageRequest.of(0,10);

        Page<Malware> page = malwareSearchService.searchMalware(malwareSearchDto, pageable);

        assertThat(page.getTotalPages()).isEqualTo(0);
        assertThat(page.getTotalElements()).isEqualTo(0);
    }

    @Test
    void riskness검색_여러개검색됨() {

        MalwareSearchDto malwareSearchDto = new MalwareSearchDto(null, null, null, RisknessType.LOW.getTitle(), null, null);
        Pageable pageable = PageRequest.of(0,10);

        Page<Malware> page = malwareSearchService.searchMalware(malwareSearchDto, pageable);

        assertThat(page.getTotalPages()).isEqualTo(1);
        assertThat(page.getTotalElements()).isEqualTo(10);
        for (int i = 0; i < 10; i++) {
            assertThat(page.getContent().get(i).getRiskness()).isEqualTo(RisknessType.LOW);
        }
    }

    @Test
    void riskness검색_검색안됨() {

        MalwareSearchDto malwareSearchDto = new MalwareSearchDto(null, null, null, "mid", null, null);
        Pageable pageable = PageRequest.of(0,10);

        Page<Malware> page = malwareSearchService.searchMalware(malwareSearchDto, pageable);

        assertThat(page.getTotalPages()).isEqualTo(0);
        assertThat(page.getTotalElements()).isEqualTo(0);
    }

    @Test
    void startDate검색_검색됨() {
        LocalDate localDate = LocalDate.of(2023, 5, 2);
        MalwareSearchDto malwareSearchDto = new MalwareSearchDto(null, null, null, null, localDate, null);
        Pageable pageable = PageRequest.of(0,10);

        Page<Malware> page = malwareSearchService.searchMalware(malwareSearchDto, pageable);

        assertThat(page.getTotalPages()).isEqualTo(1);
        assertThat(page.getTotalElements()).isEqualTo(9);
    }

    @Test
    void endDate검색_검색됨() {
        LocalDate localDate = LocalDate.of(2023, 5, 8);
        MalwareSearchDto malwareSearchDto = new MalwareSearchDto(null, null, null, null, null, localDate);
        Pageable pageable = PageRequest.of(0,10);

        Page<Malware> page = malwareSearchService.searchMalware(malwareSearchDto, pageable);

        assertThat(page.getTotalPages()).isEqualTo(1);
        assertThat(page.getTotalElements()).isEqualTo(8);
    }

}
