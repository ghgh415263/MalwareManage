package com.malclean.admin.service.malware;

import com.malclean.admin.malware.application.malware.MalwareEditRequest;
import com.malclean.admin.malware.application.malware.MalwareEditService;
import com.malclean.admin.malware.domain.MalwareFile;
import com.malclean.admin.malware.domain.MalwareMalwareFileMap;
import com.malclean.admin.member.domain.Member;
import com.malclean.admin.malware.domain.Malware;
import com.malclean.admin.malware.domain.MalwareBehavior;
import com.malclean.admin.malware.domain.MalwarePurpose;
import com.malclean.admin.enumtype.AuthorityType;
import com.malclean.admin.enumtype.BehaviorType;
import com.malclean.admin.enumtype.PurposeType;
import com.malclean.admin.enumtype.RisknessType;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Slf4j
@SpringBootTest
@Transactional
public class MalwareEditServiceTest {

    @Autowired
    private MalwareEditService malwareEditService;

    @Autowired
    private EntityManager em;

    @Test
    void 악성코드수정() {
        Member member = Member.builder()
                .username("testMember")
                .password("")
                .authority(AuthorityType.ADMIN)
                .employeeId(1L)
                .build();
        em.persist(member);

        Malware malware = Malware.builder()
                .title("title")
                .content("content")
                .nickname("nickname")
                .resolvedTime(LocalDateTime.now())
                .detectedTime(LocalDateTime.now())
                .poster(member)
                .riskness(RisknessType.LOW)
                .build();
        em.persist(malware);

        MalwarePurpose malwarePurpose = new MalwarePurpose(malware, PurposeType.ETC);
        em.persist(malwarePurpose);

        MalwareBehavior malwareBehavior = new MalwareBehavior(malware, BehaviorType.ETC);
        em.persist(malwareBehavior);

        MalwareFile malwareFile = MalwareFile.builder()
                .storeFilename("testStoreFilename")
                .signature("")
                .uploader(member)
                .build();
        em.persist(malwareFile);

        MalwareMalwareFileMap malwareMalwareFileMap = MalwareMalwareFileMap.builder()
                .malware(malware)
                .malwareFile(malwareFile)
                .filename("testFilename")
                .build();
        em.persist(malwareMalwareFileMap);

        MalwareFile malwareFile2 = MalwareFile.builder()
                .storeFilename("testStoreFilename2")
                .signature("2")
                .uploader(member)
                .build();
        em.persist(malwareFile2);

        MalwareMalwareFileMap malwareMalwareFileMap2 = MalwareMalwareFileMap.builder()
                .malware(malware)
                .malwareFile(malwareFile)
                .filename("testFilename2")
                .build();
        em.persist(malwareMalwareFileMap2);

        em.flush();
        em.clear();

        List<String> purposeList = Arrays.asList(PurposeType.BOT.name(), PurposeType.ADWARE.name());
        List<String> behaviorList = Arrays.asList(BehaviorType.PUP.name(), BehaviorType.WORM.name());
        MalwareEditRequest malwareEditRequest = new MalwareEditRequest("editedTitle","editedContent","editedNickname", RisknessType.MID.name(), new ArrayList<>(), purposeList, behaviorList, new ArrayList<>(Arrays.asList(malwareFile.getId(), malwareFile2.getId())), LocalDateTime.now(), LocalDateTime.now());

        malwareEditService.editMalware(malware.getId(), malwareEditRequest, member.getUsername());
        em.flush();
        em.clear();
        Malware findedMalware = em.find(Malware.class, malware.getId());
        MalwareFile findedMalwareFile = em.find(MalwareFile.class, malwareFile.getId());
        MalwareMalwareFileMap findedMalwareMalwareFileMap = em.find(MalwareMalwareFileMap.class, malwareMalwareFileMap.getId());
        MalwareMalwareFileMap findedMalwareMalwareFileMap2 = em.find(MalwareMalwareFileMap.class, malwareMalwareFileMap2.getId());
    }
}
