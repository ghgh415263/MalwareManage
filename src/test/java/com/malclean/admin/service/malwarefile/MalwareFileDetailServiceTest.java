package com.malclean.admin.service.malwarefile;

import com.malclean.admin.entity.Malware;
import com.malclean.admin.entity.MalwareFile;
import com.malclean.admin.entity.MalwareMalwareFileMap;
import com.malclean.admin.entity.Member;
import com.malclean.admin.enumtype.AuthorityType;
import com.malclean.admin.enumtype.RisknessType;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.LocalDateTime;
import java.util.List;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@Slf4j
@SpringBootTest
@Transactional
public class MalwareFileDetailServiceTest {

    @Autowired
    private MalwareFileDetailService malwareFileDetailService;

    @Autowired
    private EntityManager em;


    @Test
    void 파일_찾음() {
        Member member = Member.builder()
                .username("testMember")
                .password("")
                .authority(AuthorityType.ADMIN)
                .employeeId(1L)
                .build();
        em.persist(member);

        Malware malware = Malware.builder()
                .title("")
                .content("")
                .nickname("")
                .resolvedTime(LocalDateTime.now())
                .detectedTime(LocalDateTime.now())
                .poster(member)
                .riskness(RisknessType.LOW)
                .build();
        em.persist(malware);

        MalwareFile malwareFile = MalwareFile.builder()
                .uploader(member)
                .storeFilename("")
                .signature("")
                .filename("")
                .build();
        em.persist(malwareFile);
        em.flush();
        em.clear();
        /*TODO 완성*/
    }

    @Test
    void 파일_못찾음() {

        Page<MalwareMalwareFileMap> malwareMalwareFileMapList = malwareFileDetailService.findMalwareFile(1l, PageRequest.of(1,1));

        assertThat(malwareMalwareFileMapList.getTotalPages()).isEqualTo(0);

    }
}
