package com.malclean.admin.service.malwarefile;

import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.malware.malwarefile.MalwareFile;
import com.malclean.admin.domain.malware.malware.MalwareMalwareFileMap;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.member.AuthorityType;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.LocalDateTime;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@Slf4j
@SpringBootTest
@Transactional
public class MalwareFileDetailServiceTest {

    @Autowired
    private MalwareFileDetailService malwareFileDetailService;

    @Autowired
    private EntityManager em;


    @Test
    void 파일_찾음() {
        Member member = Member.builder()
                .username("testMember")
                .password("")
                .authority(AuthorityType.ADMIN)
                .employeeId(1L)
                .build();
        em.persist(member);


        Malware malware = Malware.builder()
                .title("title")
                .content("")
                .nickname("")
                .resolvedTime(LocalDateTime.now())
                .detectedTime(LocalDateTime.now())
                .poster(member)
                .riskness(RisknessType.LOW)
                .build();
        em.persist(malware);


        MalwareFile malwareFile = MalwareFile.builder()
                .uploader(member)
                .storeFilename("test123.txt")
                .signature("1")
                .build();
        em.persist(malwareFile);


        MalwareMalwareFileMap malwareMalwareFileMap = MalwareMalwareFileMap.builder()
                .filename("test.txt")
                .malware(malware)
                .malwareFile(malwareFile)
                .build();
        em.persist(malwareMalwareFileMap);


        Malware malware2 = Malware.builder()
                .title("title2")
                .content("2")
                .nickname("2")
                .resolvedTime(LocalDateTime.now())
                .detectedTime(LocalDateTime.now())
                .poster(member)
                .riskness(RisknessType.LOW)
                .build();
        em.persist(malware2);


        MalwareMalwareFileMap malwareMalwareFileMap2 = MalwareMalwareFileMap.builder()
                .filename("test.txt")
                .malware(malware2)
                .malwareFile(malwareFile)
                .build();
        em.persist(malwareMalwareFileMap2);


        Page<MalwareMalwareFileMap> malwareMalwareFileMapList = malwareFileDetailService.findMalwareFile(malwareFile.getId(), PageRequest.of(0,2));


        assertThat(malwareMalwareFileMapList.getTotalPages()).isEqualTo(1);
        assertThat(malwareMalwareFileMapList.getContent().get(0).getMalware().getTitle()).isEqualTo("title");
        assertThat(malwareMalwareFileMapList.getContent().get(1).getMalware().getTitle()).isEqualTo("title2");

    }

    @Test
    void 파일_못찾음() {

        Page<MalwareMalwareFileMap> malwareMalwareFileMapList = malwareFileDetailService.findMalwareFile(1l, PageRequest.of(0,1));

        assertThat(malwareMalwareFileMapList.getTotalPages()).isEqualTo(0);

    }
}
