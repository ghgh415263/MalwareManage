package com.malclean.admin.application.announcement;

import com.malclean.admin.TestAuditingConfig;
import com.malclean.admin.application.announcement.requestdto.AnnouncementEditRequest;
import com.malclean.admin.application.common.exception.VersionConflictException;
import com.malclean.admin.domain.announcement.Announcement;
import com.malclean.admin.domain.announcement.AnnouncementPermissionService;
import com.malclean.admin.domain.announcement.AnnouncementRepository;
import com.malclean.admin.domain.announcement.enums.AnnouncementStatusType;
import com.malclean.admin.domain.member.AuthorityType;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.member.MemberRepository;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.util.ReflectionTestUtils;

import javax.persistence.EntityNotFoundException;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;

@Slf4j
@Import(TestAuditingConfig.class)
@DataJpaTest
public class AnnouncementEditServiceTest {

    private AnnouncementEditService announcementEditService;

    @Autowired
    private AnnouncementRepository announcementRepository;

    @Autowired
    private MemberRepository memberRepository;

    @Mock
    private AnnouncementPermissionService announcementPermissionService;

    @BeforeEach
    public void beforeEach() {
        announcementEditService = new AnnouncementEditService(announcementRepository, memberRepository, announcementPermissionService);
    }

    @Test
    public void 수정실패_잘못된세션() {
        AnnouncementEditRequest announcementEditRequest = new AnnouncementEditRequest("testEditedTitle", "testEditedContent", "IMPORTANT",1);

        assertThatThrownBy(() -> announcementEditService.edit(1l, announcementEditRequest, 1l))
                .isInstanceOf(EntityNotFoundException.class);
    }

    @Test
    public void 수정실패_삭제된공지사항() {
        Member member = Member.builder()
                .employeeId(1l)
                .username("testusername")
                .password("testpassword")
                .authority(AuthorityType.ADMIN)
                .build();
        memberRepository.save(member);
        AnnouncementEditRequest announcementEditRequest = new AnnouncementEditRequest("testEditedTitle", "testEditedContent", "IMPORTANT",1);

        assertThatThrownBy(() -> announcementEditService.edit(1l, announcementEditRequest, member.getId()))
                .isInstanceOf(EntityNotFoundException.class);
    }

    @Test
    public void 수정실패_버전이달라짐() {
        Member member = Member.builder()
                .employeeId(1l)
                .username("testusername")
                .password("testpassword")
                .authority(AuthorityType.ADMIN)
                .build();
        memberRepository.save(member);
        Announcement announcement = new Announcement("testTitle", "testContent", AnnouncementStatusType.NORMAL);
        announcementRepository.save(announcement);
        ReflectionTestUtils.setField(announcement, "version", 1);
        AnnouncementEditRequest announcementEditRequest = new AnnouncementEditRequest("testEditedTitle", "testEditedContent", "IMPORTANT",0);

        assertThatThrownBy(() -> announcementEditService.edit(announcement.getAnnouncementId(), announcementEditRequest, member.getId()))
                .isInstanceOf(VersionConflictException.class);
    }

    @Test
    public void 수정성공() {
        Member member = Member.builder()
                .employeeId(1l)
                .username("testusername")
                .password("testpassword")
                .authority(AuthorityType.ADMIN)
                .build();
        memberRepository.save(member);
        Announcement announcement = new Announcement("testTitle", "testContent", AnnouncementStatusType.NORMAL);
        announcementRepository.save(announcement);
        AnnouncementEditRequest announcementEditRequest = new AnnouncementEditRequest("testEditedTitle", "testEditedContent", "IMPORTANT",0);

        announcementEditService.edit(announcement.getAnnouncementId(), announcementEditRequest, member.getId());

        assertThat(announcement.getTitle()).isEqualTo("testEditedTitle");
        assertThat(announcement.getContent()).isEqualTo("testEditedContent");
        assertThat(announcement.getAnnouncementStatus()).isEqualTo(AnnouncementStatusType.IMPORTANT);
    }




}
