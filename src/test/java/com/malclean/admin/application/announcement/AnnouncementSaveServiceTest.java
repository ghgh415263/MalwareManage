package com.malclean.admin.application.announcement;

import com.malclean.admin.TestAuditingConfig;
import com.malclean.admin.application.announcement.requestdto.AnnouncementSaveRequest;
import com.malclean.admin.domain.announcement.Announcement;
import com.malclean.admin.domain.announcement.AnnouncementPermissionService;
import com.malclean.admin.domain.announcement.AnnouncementRepository;
import com.malclean.admin.domain.member.AuthorityType;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.member.MemberRepository;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.util.ReflectionTestUtils;

import javax.persistence.EntityNotFoundException;
import java.util.Optional;

@Slf4j
@DataJpaTest
public class AnnouncementSaveServiceTest {

    private AnnouncementSaveService announcementSaveService;

    @Mock
    private AnnouncementRepository announcementRepository;

    @Mock
    private MemberRepository memberRepository;

    @Mock
    private AnnouncementPermissionService announcementPermissionService;

    @BeforeEach
    public void beforeEach() {
        announcementSaveService = new AnnouncementSaveService(announcementRepository, memberRepository, announcementPermissionService);
    }

    @Test
    public void 저장완료() {
        Member member = Member.builder()
                .employeeId(1l)
                .username("testusername")
                .password("testpassword")
                .authority(AuthorityType.ADMIN)
                .build();
        AnnouncementSaveRequest announcementSaveRequest = new AnnouncementSaveRequest("testTitle", "testContent", "IMPORTANT");
        when(memberRepository.findById(anyLong())).thenReturn(Optional.of(member));
        doNothing().when(announcementPermissionService).checkAdminPermission(member);
        when(announcementRepository.save(any(Announcement.class)))
                .thenAnswer(invocation -> {
                    final Announcement entity = invocation.getArgument(0);
                    ReflectionTestUtils.setField(entity, "announcementId", 1l);
                    return entity;
                });

        Long savedId = announcementSaveService.save(announcementSaveRequest, 1L);

        assertThat(savedId).isEqualTo(1l);
    }

    @Test
    public void 저장실패_잘못된세션() {
        AnnouncementSaveRequest announcementSaveRequest = new AnnouncementSaveRequest("testTitle", "testContent", "IMPORTANT");
        when(memberRepository.findById(anyLong())).thenReturn(Optional.empty());

        assertThatThrownBy(() -> announcementSaveService.save(announcementSaveRequest, 1L))
                .isInstanceOf(EntityNotFoundException.class);
    }
}
