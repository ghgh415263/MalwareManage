package com.malclean.admin.application.member;

import com.malclean.admin.TestAuditingConfig;
import com.malclean.admin.domain.member.AuthorityType;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.member.MemberRepository;
import com.malclean.admin.infrastructure.member.PasswordEncoder;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.Import;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@Slf4j
@Import(TestAuditingConfig.class)
@DataJpaTest
public class MemberLoginServiceTest {

    private MemberLoginService memberLoginService;
    @Autowired
    private MemberRepository memberRepository;
    @Mock
    private PasswordEncoder passwordEncoder;

    @BeforeEach
    public void beforeEach() {
        memberLoginService = new MemberLoginService(memberRepository, passwordEncoder);
    }

    @Test
    void 로그인_성공() {
        Member member = Member.builder()
                .employeeId(1l)
                .username("testusername")
                .password("b55c8792d1ce458e279308835f8a97b580263503e76e1998e279703e35ad0c2e")
                .authority(AuthorityType.ADMIN)
                .build();
        memberRepository.saveAndFlush(member);
        when(passwordEncoder.encode(any(String.class)))
                .thenReturn("b55c8792d1ce458e279308835f8a97b580263503e76e1998e279703e35ad0c2e");

        Long loginId = memberLoginService.login("testusername","testpassword123");

        assertThat(loginId).isEqualTo(1l);
    }

    @Test
    void 로그인_실패() {
        Member member = Member.builder()
                .employeeId(1l)
                .username("testusername")
                .password("testpassword")
                .authority(AuthorityType.ADMIN)
                .build();
        memberRepository.saveAndFlush(member);
        when(passwordEncoder.encode(any(String.class)))
                .thenReturn("b55c8792d1ce458e279308835f8a97b580263503e76e1998e279703e35ad0c2e");

        Long loginId = memberLoginService.login("testusername","wrongpassword123");

        assertThat(loginId).isEqualTo(null);
    }
}
