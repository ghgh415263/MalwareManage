package com.malclean.admin.application.malware;

import com.malclean.admin.application.malware.malware.MalwareSaveService;
import com.malclean.admin.application.malware.malware.requestdto.MalwareSaveRequest;
import com.malclean.admin.application.malware.malwarefile.MalwareFileSaveService;
import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.malware.malware.MalwareRepository;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.ArrayList;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@Slf4j
@DataJpaTest
@Transactional
public class MalwareSaveServiceTest {
/*
    private MalwareSaveService malwareSaveService;

    @Mock
    private MalwareRepository malwareRepository;

    @Mock
    private MalwareFileSaveService malwareFileSaveService;

    @BeforeEach
    public void beforeEach() {
        malwareSaveService = new MalwareSaveService(malwareRepository, malwareFileSaveService);
    }

    @Test
    void 악성코드_저장() {
        MalwareSaveRequest malwareSaveRequest = MalwareSaveRequest.builder()
                .title("testTitle")
                .content("testContent")
                .nickname("testNickname")
                .riskness(RisknessType.LOW.getKey())
                .multipartFileList(new ArrayList<>())
                .purposeList(new ArrayList<>())
                .behaviorList(new ArrayList<>())
                .detectedTime(LocalDateTime.now())
                .resolvedTime(LocalDateTime.now())
                .build();
        when(malwareRepository.save(any(Malware.class)))
                .thenAnswer(invocation -> {
                    final Malware entity = invocation.getArgument(0);
                    ReflectionTestUtils.setField(entity, "id", 1l);
                    return entity;
                });
        when(malwareRepository.existsByTitle(any(String.class)))
                .thenReturn(false);
        Long malwareId = malwareSaveService.saveMalware(malwareSaveRequest);

        assertThat(malwareId).isEqualTo(1l);
    }


    @Test
    void 악성코드_저장실패_중복title() {
        MalwareSaveRequest malwareSaveRequest = MalwareSaveRequest.builder()
                .title("testTitle")
                .content("testContent")
                .nickname("testNickname")
                .riskness(RisknessType.LOW.getKey())
                .multipartFileList(new ArrayList<>())
                .purposeList(new ArrayList<>())
                .behaviorList(new ArrayList<>())
                .detectedTime(LocalDateTime.now())
                .resolvedTime(LocalDateTime.now())
                .build();
        when(malwareRepository.existsByTitle(any(String.class)))
                .thenReturn(true);

        assertThatThrownBy(() -> malwareSaveService.saveMalware(malwareSaveRequest))
                .isInstanceOf(IllegalArgumentException.class);
    }
*/
}
