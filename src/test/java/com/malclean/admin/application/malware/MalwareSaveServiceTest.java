package com.malclean.admin.application.malware;

import com.malclean.admin.TestAuditingConfig;
import com.malclean.admin.application.malware.malware.MalwareSaveService;
import com.malclean.admin.application.malware.malware.requestdto.MalwareSaveRequest;
import com.malclean.admin.application.malware.malwarefile.MalwareFileSaveService;
import com.malclean.admin.domain.malware.malware.MalwareMalwarefileBulkRepository;
import com.malclean.admin.domain.malware.malware.MalwareRepository;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import com.malclean.admin.domain.malware.malwarefile.Malwarefile;
import com.malclean.admin.domain.malware.malwarefile.SignatureCreator;
import com.malclean.admin.domain.malware.malwarefile.SignatureMultipartfileMap;
import com.malclean.admin.helper.TestMalwarefileFactory;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@Slf4j
@Import(TestAuditingConfig.class)
@DataJpaTest
public class MalwareSaveServiceTest {

    private MalwareSaveService malwareSaveService;

    @Autowired
    private MalwareRepository malwareRepository;


    @Mock
    private MalwareMalwarefileBulkRepository malwareMalwareFileBulkRepository;

    @Mock
    private SignatureCreator signatureCreator;

    @Mock
    private MalwareFileSaveService malwareFileSaveService;

    @BeforeEach
    public void beforeEach() {
        malwareSaveService = new MalwareSaveService(malwareRepository, malwareMalwareFileBulkRepository, malwareFileSaveService, signatureCreator);
    }

    @Test
    void 악성코드_저장() {

        Malwarefile malwarefile = TestMalwarefileFactory.createDefaultMalwarefile();

        doReturn("testSignature")
                .when(signatureCreator)
                .createSignature(any(MultipartFile.class));
        doReturn(List.of(malwarefile))
                .when(malwareFileSaveService)
                .saveMalwareFileList(any(SignatureMultipartfileMap.class), anyLong());
        doNothing().when(malwareMalwareFileBulkRepository).saveAll(anyList() , anyLong());

        MockMultipartFile file = new MockMultipartFile("file", "hello.txt", MediaType.TEXT_PLAIN_VALUE, "Hello, World!".getBytes());

        MalwareSaveRequest malwareSaveRequest = MalwareSaveRequest.builder()
                .title("testTitle")
                .content("testContent")
                .nickname("testNickname")
                .riskness(RisknessType.LOW.getKey())
                .multipartFileList(List.of(file))
                .purposeList(new ArrayList<>())
                .behaviorList(new ArrayList<>())
                .detectedTime(LocalDateTime.now())
                .resolvedTime(LocalDateTime.now())
                .build();

        Long malwareId = malwareSaveService.saveMalware(malwareSaveRequest, 1l);

        assertThat(malwareId).isEqualTo(1l);
    }

}
