package com.malclean.admin.application.malware;

import com.malclean.admin.TestAuditingConfig;
import com.malclean.admin.application.malware.malwarefile.MalwarefileSaveService;
import com.malclean.admin.domain.malware.malwarefile.MalwareFileBulkRepository;
import com.malclean.admin.domain.malware.malwarefile.MalwarefileRepository;
import com.malclean.admin.domain.malware.malwarefile.SignatureCreator;
import com.malclean.admin.domain.malware.malwarefile.SignatureMultipartfileMap;
import com.malclean.admin.domain.malware.malwarefile.service.StoreManager;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@Slf4j
@Import(TestAuditingConfig.class)
@DataJpaTest
public class MalwarefileSaveServiceTest {

    private MalwarefileSaveService malwareFileSaveService;

    @Autowired
    private MalwarefileRepository malwarefileRepository;

    @Mock
    private SignatureCreator signatureCreator;

    @Mock
    private StoreManager storeManager;

    @Mock
    private MalwareFileBulkRepository malwareFileBulkRepository;

    @BeforeEach
    public void beforeEach() {
        malwareFileSaveService = new MalwarefileSaveService(malwarefileRepository, storeManager, malwareFileBulkRepository);
    }

    @Test
    void 파일리스트저장(){

        doReturn("testSignature")
                .when(signatureCreator)
                .createSignature(any(MultipartFile.class));

        MockMultipartFile file = new MockMultipartFile("file", "hello.txt", MediaType.TEXT_PLAIN_VALUE, "Hello, World!".getBytes());
        List<MultipartFile> multipartFiles = List.of(file);
        SignatureMultipartfileMap signatureMultipartfileMap = new SignatureMultipartfileMap(signatureCreator, multipartFiles);

        malwareFileSaveService.saveMalwareFileList(signatureMultipartfileMap, 1l);

        verify(malwareFileBulkRepository)
                .saveAll(anyList() , anyLong());
    }
}
