package com.malclean.admin;


import com.malclean.admin.domain.member.AuthorityType;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.member.MemberRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.jdbc.core.JdbcTemplate;

import java.sql.PreparedStatement;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


@DataJpaTest
public class jdbcTemplateTest {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Autowired
    private MemberRepository memberRepository;

    @Test
    void 테스트() {
        Member member = Member.builder()
                .employeeId(1l)
                .username("testusername")
                .password("testpassword")
                .authority(AuthorityType.ADMIN)
                .build();
        Member member2 = Member.builder()
                .employeeId(2l)
                .username("testusername2")
                .password("testpassword2")
                .authority(AuthorityType.ADMIN)
                .build();
        List<Member> members = new ArrayList<>(Arrays.asList(member, member2));
        String sql = "insert into member (id, created_by, created_time, modified_by, modified_time, authority, employee_id, password, username) values (default, ?, ?, ?, ?, ?, ?, ?, ?)";
        jdbcTemplate.batchUpdate(sql,
                members,
                2,
                (PreparedStatement ps, Member tempMember) -> {
                    ps.setLong(1, 1l);
                    ps.setObject(2, LocalDateTime.of(1998, 11, 18,10,20,10));
                    ps.setLong(3, 2l);
                    ps.setObject(4, LocalDateTime.of(1998, 11, 18,10,20,10));
                    ps.setString(5, tempMember.getAuthority().getKey());
                    ps.setLong(6, tempMember.getEmployeeId());
                    ps.setString(7, tempMember.getUsername());
                    ps.setString(8, tempMember.getPassword());
        });

        Member finded = memberRepository.findById(1l).orElseThrow();
    }
}
