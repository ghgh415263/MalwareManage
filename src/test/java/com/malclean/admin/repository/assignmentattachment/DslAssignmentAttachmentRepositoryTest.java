package com.malclean.admin.repository.assignmentattachment;

import com.malclean.admin.entity.AssignmentAttachment;
import com.malclean.admin.entity.MalwareAssignment;
import com.malclean.admin.entity.Member;
import com.malclean.admin.entity.malware.Malware;
import com.malclean.admin.enumtype.AssignmentStatusType;
import com.malclean.admin.enumtype.AuthorityType;
import com.malclean.admin.enumtype.RisknessType;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.LocalDateTime;
import java.util.List;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@Slf4j
@SpringBootTest
@Transactional
public class DslAssignmentAttachmentRepositoryTest {

    @Autowired
    private DslAssignmentAttachmentRepository dslAssignmentAttachmentRepository;

    @Autowired
    private EntityManager em;

    @Test
    public void 리스트가져오기() {

        Member member = Member.builder()
                .username("testMember")
                .password("")
                .authority(AuthorityType.ADMIN)
                .employeeId(1L)
                .build();
        em.persist(member);

        Malware malware = Malware.builder()
                .title("")
                .content("")
                .nickname("")
                .resolvedTime(LocalDateTime.now())
                .detectedTime(LocalDateTime.now())
                .poster(member)
                .riskness(RisknessType.LOW)
                .build();
        em.persist(malware);

        MalwareAssignment malwareAssignment = MalwareAssignment.builder()
                .malware(malware)
                .title("")
                .content("")
                .assignmentStatus(AssignmentStatusType.NOT_ASSIGNED)
                .assigner(member)
                .assignee(member)
                .estimatedTime(LocalDateTime.now())
                .build();
        em.persist(malwareAssignment);


        String prefixName = "a";
        for (int i = 1; i <= 30; i++) {
            AssignmentAttachment assignmentAttachment = AssignmentAttachment.builder()
                    .storeFilename("")
                    .filename(prefixName + i)
                    .uploader(member)
                    .malwareAssignment(malwareAssignment)
                    .build();
            em.persist(assignmentAttachment);
        }


        //when
        List<AssignmentAttachment> assignmentAttachments = dslAssignmentAttachmentRepository.findAll(malwareAssignment.getId(),null,10);

        //then
        assertThat(assignmentAttachments.size()).isEqualTo(10);
        assertThat(assignmentAttachments.get(0).getFilename()).isEqualTo("a30");
        assertThat(assignmentAttachments.get(9).getFilename()).isEqualTo("a21");
    }
}
