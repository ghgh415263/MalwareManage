package com.malclean.admin.repository.assignmentComment;

import com.malclean.admin.domain.assignment.assignmentcomment.AssignmentComment;
import com.malclean.admin.domain.assignment.assignment.MalwareAssignment;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.assignment.assignment.AssignmentStatusType;
import com.malclean.admin.domain.member.AuthorityType;
import com.malclean.admin.domain.malware.malware.enums.RisknessType;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.LocalDateTime;
import java.util.List;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@Slf4j
@SpringBootTest
@Transactional
public class DslAssignmentCommentRepositoryTest {
/*
    @Autowired
    private EntityManager em;

    @BeforeEach
    void 선작업() {

        Member member = Member.builder()
                .username("testMember")
                .password("")
                .authority(AuthorityType.ADMIN)
                .employeeId(1L)
                .build();
        em.persist(member);

        Malware malware = Malware.builder()
                .title("")
                .content("")
                .nickname("")
                .resolvedTime(LocalDateTime.now())
                .detectedTime(LocalDateTime.now())
                .poster(member)
                .riskness(RisknessType.LOW)
                .build();
        em.persist(malware);

        MalwareAssignment malwareAssignment = MalwareAssignment.builder()
                .malware(malware)
                .title("")
                .content("")
                .assignmentStatus(AssignmentStatusType.NOT_ASSIGNED)
                .assigner(member)
                .assignee(member)
                .estimatedTime(LocalDateTime.now())
                .build();
        em.persist(malwareAssignment);


        String prefixName = "a";
        for (int i = 1; i <= 30; i++) {
            AssignmentComment assignmentComment = AssignmentComment.builder()
                    .content(prefixName + i)
                    .writer(member)
                    .malwareAssignment(malwareAssignment)
                    .build();
            em.persist(assignmentComment);
        }

    }

    @Test
    public void 페이지가져오기_첫페이지() {

        MalwareAssignment malwareAssignment = em.find(MalwareAssignment.class, 1L);

        //when
        List<AssignmentComment> assignmentComments = dslAssignmentCommentRepository.findAll(malwareAssignment.getId(),null,10);

        //then
        assertThat(assignmentComments.size()).isEqualTo(10);
        assertThat(assignmentComments.get(0).getContent()).isEqualTo("a30");
        assertThat(assignmentComments.get(9).getContent()).isEqualTo("a21");
    }

    @Test
    public void 페이지가져오기_두번째페이지() {

        MalwareAssignment malwareAssignment = em.find(MalwareAssignment.class, 1L);

        //when
        List<AssignmentComment> assignmentComments = dslAssignmentCommentRepository.findAll(malwareAssignment.getId(),21l,10);

        //then
        assertThat(assignmentComments.size()).isEqualTo(10);
        assertThat(assignmentComments.get(0).getContent()).isEqualTo("a20");
        assertThat(assignmentComments.get(9).getContent()).isEqualTo("a11");
    }*/
}
