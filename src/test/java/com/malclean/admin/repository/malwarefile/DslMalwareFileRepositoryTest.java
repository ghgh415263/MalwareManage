package com.malclean.admin.repository.malwarefile;

import com.malclean.admin.malware.domain.MalwareFile;
import com.malclean.admin.malware.domain.MalwareMalwareFileMap;
import com.malclean.admin.member.domain.Member;
import com.malclean.admin.malware.domain.malware.Malware;
import com.malclean.admin.malware.domain.malwarefile.DslMalwareFileRepository;
import com.malclean.admin.malware.domain.malwarefile.MalwareFileSearchRequest;
import com.malclean.admin.member.domain.AuthorityType;
import com.malclean.admin.malware.domain.malware.enums.RisknessType;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.PageRequest;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.EntityManager;
import java.time.LocalDateTime;
import java.util.List;

@Slf4j
@SpringBootTest
@Transactional
public class DslMalwareFileRepositoryTest {

    @Autowired
    private DslMalwareFileRepository dslMalwareFileRepository;

    @Autowired
    private EntityManager em;

    @Test
    void test() {
        Member member = Member.builder()
                .username("testMember")
                .password("")
                .authority(AuthorityType.ADMIN)
                .employeeId(1L)
                .build();
        em.persist(member);

        Malware malware = Malware.builder()
                .title("")
                .content("")
                .nickname("")
                .resolvedTime(LocalDateTime.now())
                .detectedTime(LocalDateTime.now())
                .poster(member)
                .riskness(RisknessType.LOW)
                .build();
        em.persist(malware);

        MalwareFile malwareFile = MalwareFile.builder()
                .signature("123")
                .uploader(member)
                .storeFilename("testfile2.txt")
                .build();
        em.persist(malwareFile);

        MalwareMalwareFileMap malwareMalwareFileMap = MalwareMalwareFileMap.builder()
                .malware(malware)
                .malwareFile(malwareFile)
                .filename("testfile.txt")
                .build();
        em.persist(malwareMalwareFileMap);

        em.flush();
        em.clear();

        List<MalwareFile> malwareFileList = dslMalwareFileRepository.findAll(new MalwareFileSearchRequest("123", null), PageRequest.of(0,1));


    }
}
