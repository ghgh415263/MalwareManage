package com.malclean.admin.dao;

import com.malclean.admin.TestAuditingConfig;
import com.malclean.admin.dao.announcement.AnnouncementListDao;
import com.malclean.admin.dao.announcement.requestdto.AnnouncementSearchReq;
import com.malclean.admin.dao.announcement.responsedto.AnnouncementInPage;
import com.malclean.admin.domain.announcement.Announcement;
import com.malclean.admin.domain.announcement.enums.AnnouncementStatusType;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.helper.TestMemberFactory;
import com.malclean.admin.infrastructure.announcement.AnnouncementListDaoImpl;
import com.querydsl.jpa.impl.JPAQueryFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.context.annotation.Import;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;

import javax.persistence.EntityManager;

import java.time.LocalDate;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@DataJpaTest
@Import(TestAuditingConfig.class)
public class AnnouncementListDaoTest {

    @Autowired
    private TestEntityManager tem;

    private AnnouncementListDao announcementListDao;

    @BeforeEach
    public void beforeEach() {
        EntityManager em = tem.getEntityManager();
        announcementListDao = new AnnouncementListDaoImpl(new JPAQueryFactory(em));
    }

    @Test
    void 리스트_가져오기_모든조건이_null(){
        Member member = TestMemberFactory.createMember();
        tem.persist(member);

        for ( int i = 1; i <= 30; i++) {
            Announcement announcement = new Announcement("testTitle"+i, "testContent"+i, AnnouncementStatusType.IMPORTANT);
            tem.persist(announcement);
        }

        AnnouncementSearchReq req = new AnnouncementSearchReq(null,null,null,null,null);

        Page<AnnouncementInPage> findedPage = announcementListDao.findBySearch(req, PageRequest.of(1,10));

        assertThat(findedPage.getTotalPages())
                .isEqualTo(3);
        assertThat(findedPage.getTotalElements())
                .isEqualTo(30);
        assertThat(findedPage.getContent().get(0).getTitle())
                .isEqualTo("testTitle20");
        assertThat(findedPage.getContent().get(9).getTitle())
                .isEqualTo("testTitle11");
    }

    @Test
    void 리스트_가져오기_모든조건이_NotNull(){
        Member member = TestMemberFactory.createMember();
        tem.persist(member);

        for ( int i = 1; i <= 30; i++) {
            Announcement announcement = new Announcement("testTitle"+i, "testContent"+i, AnnouncementStatusType.IMPORTANT);
            tem.persist(announcement);
        }

        AnnouncementSearchReq req = new AnnouncementSearchReq("testTitle11", AnnouncementStatusType.IMPORTANT.getKey(),"testusername", LocalDate.now(),LocalDate.now());

        Page<AnnouncementInPage> findedPage = announcementListDao.findBySearch(req, PageRequest.of(0,10));

        assertThat(findedPage.getTotalPages())
                .isEqualTo(1);
        assertThat(findedPage.getTotalElements())
                .isEqualTo(1);
        assertThat(findedPage.getContent().get(0).getTitle())
                .isEqualTo("testTitle11");
    }
}
