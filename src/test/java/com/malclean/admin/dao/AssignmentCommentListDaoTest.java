package com.malclean.admin.dao;

import com.malclean.admin.TestAuditingConfig;
import com.malclean.admin.dao.assignment.assignmentcomment.AssignmentCommentRes;
import com.malclean.admin.dao.assignment.assignmentcomment.AssignmentCommentListDao;
import com.malclean.admin.domain.assignment.assignment.AssignmentStatusType;
import com.malclean.admin.domain.assignment.assignment.MalwareAssignment;
import com.malclean.admin.domain.assignment.assignmentcomment.AssignmentComment;
import com.malclean.admin.domain.malware.malware.Malware;
import com.malclean.admin.domain.member.Member;
import com.malclean.admin.helper.TestMalwareFactory;
import com.malclean.admin.helper.TestMemberFactory;
import com.malclean.admin.infrastructure.assignment.assignmentcomment.AssignmentCommentListDaoImpl;
import com.querydsl.jpa.impl.JPAQueryFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.context.annotation.Import;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;

import javax.persistence.EntityManager;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

@DataJpaTest
@Import(TestAuditingConfig.class)
public class AssignmentCommentListDaoTest {

    @Autowired
    private TestEntityManager tem;

    private AssignmentCommentListDao assignmentCommentListDao;

    @BeforeEach
    public void beforeEach() {
        EntityManager em = tem.getEntityManager();
        assignmentCommentListDao = new AssignmentCommentListDaoImpl(new JPAQueryFactory(em));
    }

    @Test
    void 리스트_가져오기(){
        Malware malware = TestMalwareFactory.createMalware();
        tem.persist(malware);

        Member member = TestMemberFactory.createMember();
        tem.persist(member);

        MalwareAssignment malwareAssignment = MalwareAssignment.builder()
                .malware(malware)
                .assignmentStatus(AssignmentStatusType.ASSIGNED)
                .title("test")
                .content("test")
                .build();

        tem.persist(malwareAssignment);

        for ( int i = 1; i <= 30; i++) {
            AssignmentComment assignmentComment1 = AssignmentComment.builder()
                    .malwareAssignment(malwareAssignment)
                    .content("comment"+i)
                    .build();
            tem.persist(assignmentComment1);
        }

        Page<AssignmentCommentRes> findedPage = assignmentCommentListDao.findPage(malwareAssignment.getId(), member.getId(), PageRequest.of(1,5));

        assertThat(findedPage.getTotalPages())
                .isEqualTo(6);
        assertThat(findedPage.getTotalElements())
                .isEqualTo(30);
        assertThat(findedPage.getContent().get(0).getContent())
                .isEqualTo("comment25");
        assertThat(findedPage.getContent().get(4).getContent())
                .isEqualTo("comment21");
    }
}
