package com.malclean.admin.ui.member;

import com.malclean.admin.application.member.MemberSaveService;
import com.malclean.admin.application.member.exceptions.WeakPasswordException;
import com.malclean.admin.application.member.requestdto.MemberSaveRequest;
import com.malclean.admin.ui.common.enummapper.EnumMapper;
import com.malclean.admin.domain.member.AuthorityType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;

import static org.mockito.Mockito.doThrow;

@ExtendWith(SpringExtension.class)
public class MemberSaveControllerTest {

    private MemberSaveController memberSaveController;

    @Mock
    private MemberSaveService memberSaveService;

    private EnumMapper enumMapper;

    @BeforeEach
    public void beforeEach() {
        enumMapper = new EnumMapper();
        enumMapper.put("AuthorityType", AuthorityType.class);
        memberSaveController = new MemberSaveController(memberSaveService, enumMapper);
    }

    @Test
    public void 저장성공() {
        //given
        MemberSaveRequest request = new MemberSaveRequest("testUsername","testPassword12!", 1l, "ADMIN");
        BindingResult bindingResult = new BeanPropertyBindingResult(request, "memberSaveRequest");
        Model model = new ExtendedModelMap();
        Long sessionMemberId = 1l;

        //when
        String viewName = memberSaveController.join(request, bindingResult, sessionMemberId, model);

        //then
        assertThat(viewName).isEqualTo("joinComplete");
    }

    @Test
    public void 저장실패_요청바인딩실패() {
        MemberSaveRequest request = new MemberSaveRequest("","", null, "");
        BindingResult bindingResult = new BeanPropertyBindingResult(request, "memberSaveRequest");
        bindingResult.rejectValue("username", null, "");
        bindingResult.rejectValue("password", null, "");
        bindingResult.rejectValue("employeeId", null, "");
        bindingResult.rejectValue("Authority", null, "");
        Model model = new ExtendedModelMap();
        Long sessionMemberId = 1l;

        String viewName = memberSaveController.join(request, bindingResult, sessionMemberId, model);

        assertThat(viewName).isEqualTo("joinForm");
    }

    @Test
    public void 저장실패_패스워드가_약함(){
        //given
        MemberSaveRequest request = new MemberSaveRequest("testUsername","testPassword12", 1l, "ADMIN");
        BindingResult bindingResult = new BeanPropertyBindingResult(request, "memberSaveRequest");
        Model model = new ExtendedModelMap();
        Long sessionMemberId = 1l;

        doThrow(new WeakPasswordException(""))
                .when(memberSaveService)
                .saveMember(request, sessionMemberId);

        //when
        String viewName = memberSaveController.join(request, bindingResult, sessionMemberId, model);

        //then
        assertThat(viewName).isEqualTo("joinForm");
        String rejectedField = bindingResult.getFieldErrors().get(0).getField();
        assertThat(rejectedField).isEqualTo("password");
    }

}
